<?php
namespace App\Controller\Api;

use Cake\Filesystem\File;
use Cake\Filesystem\Folder;
use Cake\I18n\Time;
use App\Controller\Api\ApiController;
use App\Model\Entity\ProsesPermohonan;
use Psr\Log\LogLevel;

/**
 * ProsesPermohonan Controller
 *
 * @property \App\Model\Table\ProsesPermohonanTable $ProsesPermohonan
 */
class ProsesPermohonanController extends ApiController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['downloadSignedReport']);
    }

    public function uploadSignReport()
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            $reportData = $this->request->data['signed_report'];
            $fileName = str_replace('.pdf', '-signed.pdf', $this->request->data['filename']);
            $prosesPermohonanId = $this->request->data['proses_permohonan_id'];
            $resultDir = new Folder(WWW_ROOT . 'files' . DS . 'signed');
            $prosesPermohonan = $this->ProsesPermohonan->get($prosesPermohonanId);

            if (!$resultDir->path) {
                throw new \Exception('Direktori Result tidak dapat diakses');
            }

            $this->log($_FILES, LogLevel::INFO);
            $this->log($_POST, LogLevel::INFO);

            if (isset($_FILES) && !empty($_FILES)) {
                // Create file yang sudah disigned
                UploadService::setInstansiID($this->getInstansiIdFromDataOrSession());
                $uploadData = \App\Service\UploadService::upload('signed_report', 'signed');
                $fileName = $uploadData['file_name'];
            } else {
                $reportData = base64_decode($reportData);
                $newFilePath = $resultDir->path . DS . $fileName;
                $newFile = new File($newFilePath, true); // Create the file

                if (!$newFile->write($reportData)) {
                    throw new \Exception('Tidak dapat menyimpan file PDF yang sudah ditandatangani');
                }

                // If there's any previous file, remove it
                if (
                    !$prosesPermohonan->file_signed_report
                    && is_file($resultDir->path . DS . $prosesPermohonan->file_signed_report)
                ) {
                    unlink($resultDir->path . DS . $prosesPermohonan->file_signed_report);
                }
            }

            // Save nama file ke proses_permohonan
            $prosesPermohonan->file_signed_report = $fileName;
            $prosesPermohonan->tgl_signed_report = Time::now();

            if (!$this->ProsesPermohonan->save($prosesPermohonan)) {
                throw new \Exception('Tidak berhasil menyimpan Signed Report');
            }

            $message = 'Proses Sign Report berhasil';
            $success = true;

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->log($message, LogLevel::ERROR);
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    /*public function index()
    {
        $success = true;
        $message = '';
        $this->paginate = [
            'contain' => ['Permohonan', 'Izin', 'Proses'],
            'conditions' => [
                'OR' => [
                    'LOWER(ProsesPermohonan.tautan) LIKE' => '%' . $this->_apiQueryString . '%',
                    'LOWER(ProsesPermohonan.status) LIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ]
        ];
        $prosesPermohonan = $this->paginate($this->ProsesPermohonan);
        $paging = $this->request->params['paging']['ProsesPermohonan'];
        $prosesPermohonan = $this->addRowNumber($prosesPermohonan);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $prosesPermohonan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }*/

    /**
     * View method
     *
     * @param string|null $id Proses Permohonan id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $prosesPermohonan = $this->ProsesPermohonan->get($id, [
            'contain' => [
                'PermohonanIzin' => ['fields' => ['id', 'no_permohonan', 'pemohon_id', 'unit_id', 'instansi_id']],
                'PermohonanIzin.Instansi' => ['fields' => ['id', 'nama']],
                'PermohonanIzin.Unit' => ['fields' => ['id', 'nama']],
                'PermohonanIzin.JenisIzin' => ['fields' => ['id', 'jenis_izin']],
                'PermohonanIzin.Pemohon' => ['fields' => ['id', 'nama']],
            ]
        ]);

        $this->setResponseData($prosesPermohonan, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    /*public function add()
    {
        $success = false;
        $message = '';

        $prosesPermohonan = $this->ProsesPermohonan->newEntity();
        if ($this->request->is('post')) {
            $prosesPermohonan = $this->ProsesPermohonan->patchEntity($prosesPermohonan, $this->request->data);
            if ($this->ProsesPermohonan->save($prosesPermohonan)) {
                $success = true;
                $message = __('Proses Permohonan berhasil disimpan.');
            } else {
                $message = __('Proses Permohonan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($prosesPermohonan, $success, $message);
    }*/

    /**
     * Edit method
     *
     * @param string|null $id Proses Permohonan id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    /*public function edit($id = null)
    {
        $success = false;
        $message = '';

        $prosesPermohonan = $this->ProsesPermohonan->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $prosesPermohonan = $this->ProsesPermohonan->patchEntity($prosesPermohonan, $this->request->data);
            if ($this->ProsesPermohonan->save($prosesPermohonan)) {
                $success = true;
                $message = __('Proses Permohonan berhasil disimpan.');
            } else {
                $message = __('Proses Permohonan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($prosesPermohonan, $success, $message);
    }*/

    /**
     * Delete method
     *
     * @param string|null $id Proses Permohonan id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    /*public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $prosesPermohonan = $this->ProsesPermohonan->get($id);
        if ($this->ProsesPermohonan->delete($prosesPermohonan)) {
            $success = true;
            $message = __('Proses Permohonan berhasil dihapus.');
        } else {
            $message = __('Proses Permohonan tidak berhasil dihapus. Silahkan coba kembali.');
        }
        $this->setResponseData($data, $success, $message);
    }*/

    public function downloadSignedReport($filename)
    {
        $templateDir = new Folder(WWW_ROOT . 'files' . DS . 'signed');
        if (!$templateDir->path) {
            throw new \Exception('Folder tidak dapat diakses');
        }

        $filePath = $templateDir->path . DS . $filename;
        if (!file_exists($filePath)) {
            throw new \Exception('Path file tidak dapat diakses');
        }

        $response = $this->response->withFile(
            $filePath,
            ['download' => true, 'name' => $filename]
        );

        return $response;
    }
}
