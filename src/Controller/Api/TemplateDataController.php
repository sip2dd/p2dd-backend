<?php
namespace App\Controller\Api;

use App\Model\Entity\TemplateData;
use App\Service\DynamicFormService;
use App\Service\ReportGeneratorService;
use App\Service\UploadService;
use Cake\Core\Configure;
use Cake\Core\Exception\Exception;
use Cake\Datasource\ConnectionManager;
use Cake\I18n\Time;
use Cake\ORM\TableRegistry;
use Cake\Filesystem\Folder;
use Cake\Filesystem\File;
use Cake\Utility\Inflector;
use Cake\Utility\Xml;
use Psr\Log\LogLevel;

/**
 * TemplateData Controller
 *
 * @property \App\Model\Table\TemplateDataTable $TemplateData
 */
class TemplateDataController extends ApiController
{
    use \Cake\Log\LogTrait;

    private $reservedQueryString = [
        '_url', 'key_id', 'q', 'page', 'limit'
    ];

    public function initialize()
    {
		parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['keluaran', 'testReport', 'downloadFile']);
    }

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->TemplateData->setInstansi($this->getCurrentInstansi());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';
        $this->paginate = [
            'fields' => [
                'id',
                'keterangan',
                'tipe_keluaran'
            ],
            'contain' => ['Instansi' => ['fields' => ['nama']]],
            'conditions' => [
                'OR' => [
                    'LOWER(TemplateData.keterangan) ILIKE' => '%' . $this->_apiQueryString . '%',
                    'LOWER(TemplateData.tipe_keluaran) ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'order' => [
                'TemplateData.id' => 'DESC',
                'TemplateData.keterangan' => 'ASC'
            ]
        ];

        $templateData = $this->paginate($this->TemplateData);
        $paging = $this->request->params['paging']['TemplateData'];
        $templateData = $this->addRowNumber($templateData);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $templateData,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Template Data id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $templateData = $this->TemplateData->get($id, [
            'fields' => [
                'id',
                'keterangan',
                'tipe_keluaran',
                'instansi_id',
                'template_dokumen',
                'output_as_pdf',
            ],
            'contain' => [
                'Instansi' => ['fields' => ['id', 'nama']],
                'KelompokData' => [
                    'fields' => [
                        'id', 'template_data_id', 'label_kelompok', 'jenis_sumber', 'sql',
                        'combogrid_value_col', 'combogrid_label_col', 'tipe'
                    ]
                ],
                'KelompokData.KelompokTabel' => ['fields' => ['id', 'kelompok_data_id', 'nama_tabel', 'tipe_join']],
                'KelompokData.KelompokKolom' => ['fields' => ['id', 'kelompok_data_id', 'nama_tabel', 'nama_kolom', 'alias_kolom']],
                'KelompokData.KelompokKondisi' => [
                    'fields' => [
                        'id', 'kelompok_data_id', 'nama_tabel_utama', 'nama_tabel_1', 'nama_kolom_1',
                        'tipe_kondisi', 'nama_tabel_2', 'nama_kolom_2', 'tipe_relasi'
                    ]
                ]
            ]
        ]);
        $this->setResponseData($templateData, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $templateData = $this->TemplateData->newEntity();

        if ($this->request->is('post')) {
            $templateData = $this->TemplateData->patchEntity(
                $templateData,
                $this->request->data,
                [
                    'associated' => [
                        'KelompokData', 'KelompokData.KelompokTabel', 'KelompokData.KelompokKolom',
                        'KelompokData.KelompokKondisi'
                    ]
                ]
            );

            if ($this->TemplateData->save($templateData)) {
                $success = true;
                $message = __('template data berhasil disimpan.');
            } else {
                $this->setErrors($templateData->errors());
                $message = __('template data tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($templateData, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Template Data id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $templateData = $this->TemplateData->get($id, [
            'fields' => [
                'id',
                'keterangan',
                'tipe_keluaran',
                'instansi_id',
                'template_dokumen',
                'output_as_pdf',
            ],
            'contain' => [
                'Instansi' => ['fields' => ['id', 'nama']],
                'KelompokData' => [
                    'fields' => [
                        'id', 'template_data_id', 'label_kelompok', 'jenis_sumber', 'sql',
                        'combogrid_value_col', 'combogrid_label_col'
                    ]
                ],
                'KelompokData.KelompokTabel' => ['fields' => ['id', 'kelompok_data_id', 'nama_tabel', 'tipe_join']],
                'KelompokData.KelompokKolom' => ['fields' => ['id', 'kelompok_data_id', 'nama_tabel', 'nama_kolom', 'alias_kolom']],
                'KelompokData.KelompokKondisi' => [
                    'fields' => [
                        'id', 'kelompok_data_id', 'nama_tabel_utama', 'nama_tabel_1', 'nama_kolom_1',
                        'tipe_kondisi', 'nama_tabel_2', 'nama_kolom_2', 'tipe_relasi'
                    ]
                ]
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $templateData = $this->TemplateData->patchEntity($templateData, $this->request->data, [
                'associated' => ['KelompokData', 'KelompokData.KelompokTabel', 'KelompokData.KelompokKolom', 'KelompokData.KelompokKondisi']
            ]);

            if ($this->TemplateData->save($templateData)) {
                $success = true;
                $message = __('template data berhasil disimpan.');
            } else {
                $this->setErrors($templateData->errors());
                $message = __('template data tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($templateData, $success, $message);
    }

    public function copy($id)
    {
        $success = false;
        $message = '';

        $templateData = $this->TemplateData->get($id, [
            'contain' => [
                'KelompokData' => [
                    'fields' => [
                        'id', 'template_data_id', 'label_kelompok', 'jenis_sumber', 'sql',
                        'combogrid_value_col', 'combogrid_label_col', 'tipe'
                    ]
                ],
                'KelompokData.KelompokTabel' => ['fields' => ['id', 'kelompok_data_id', 'nama_tabel', 'tipe_join']],
                'KelompokData.KelompokKolom' => ['fields' => ['id', 'kelompok_data_id', 'nama_tabel', 'nama_kolom', 'alias_kolom']],
                'KelompokData.KelompokKondisi' => [
                    'fields' => [
                        'id', 'kelompok_data_id', 'nama_tabel_utama', 'nama_tabel_1', 'nama_kolom_1',
                        'tipe_kondisi', 'nama_tabel_2', 'nama_kolom_2', 'tipe_relasi'
                    ]
                ]
            ]
        ])->toArray();

        if ($this->request->is(['patch', 'post', 'put']) && !empty($templateData)) {
            DynamicFormService::setInstansi($this->getCurrentInstansi());
            $data = DynamicFormService::prepareCopyTemplateData($templateData);

            $newTemplateData = $this->TemplateData->newEntity();
            $newTemplateData = $this->TemplateData->patchEntity($newTemplateData, $data, [
                'associated' => [
                    'KelompokData', 'KelompokData.KelompokTabel', 'KelompokData.KelompokKolom', 'KelompokData.KelompokKondisi'
                ]
            ]);

            if ($this->TemplateData->save($newTemplateData)) {
                $success = true;
                $message = __('Template Data berhasil diduplikasi.');
            } else {
                $this->setErrors($newTemplateData->errors());
                $message = __('Template Data tidak berhasil diduplikasi. Silahkan coba kembali.');
            }
        }

        $this->setResponseData([], $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Template Data id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $templateData = $this->TemplateData->get($id);

        if ($this->TemplateData->delete($templateData)) {
            $success = true;
            $message = __('template data berhasil dihapus.');
        } else {
            $message = __('template data tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Get List Report
     */
    public function getReportList()
    {
        $success = true;
        $message = '';

        $templateDataTable = $this->TemplateData;

        $form = $this->TemplateData->find('all', [
            'fields' => ['TemplateData.id', 'TemplateData.keterangan'],
            'conditions' => [
                'OR' => [
                    'LOWER(TemplateData.keterangan) LIKE' => '%' . $this->_apiQueryString . '%',
                ],
                'TemplateData.tipe_keluaran' => $templateDataTable::TIPE_DOKUMEN
            ],
            'limit' => $this->_autocompleteLimit
        ]);
        $data = array(
            'items' => $form
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Get Options for Tipe Keluaran
     */
    public function getTipeKeluaranList()
    {
        $success = true;
        $message = '';
        $templateDataTable = $this->TemplateData;
        $tipeKeluaranList = [
            [
                'kode' => $templateDataTable::TIPE_COMBOGRID_SOURCE,
                'label' => 'Combogrid Webservice',
            ],
            [
                'kode' => $templateDataTable::TIPE_DOKUMEN,
                'label' => 'Dokumen Cetak',
            ],
            [
                'kode' => $templateDataTable::TIPE_JSON,
                'label' => 'JSON',
            ],
            [
                'kode' => $templateDataTable::TIPE_XML,
                'label' => 'XML',
            ],
        ];

        $data = ['items' => $tipeKeluaranList];
        $this->setResponseData($data, $success, $message);
    }

    /**
     * Function to get result from Template Data
     * @param null $id
     * @return void
     */
    public function keluaran($id = null)
    {
		try {
            // Parse the query string
            $filters = $this->parseQueryString($this->request->query);
            extract($filters);

            $templateData = $this->TemplateData->get($id, [
                'fields' => [
                    'id',
                ],
                'contain' => [
                    'KelompokData' => ['fields' => ['id', 'template_data_id', 'label_kelompok', 'jenis_sumber', 'sql']]
                ]
            ]);

            if (!$templateData) {
                $response = $this->response->withStatus(404);
                return response;
            }

            $data = [];
            foreach ($templateData->kelompok_data as $kelompokData) {
                $kelompokData->label_kelompok = strtolower($kelompokData->label_kelompok);

                switch (strtoupper($kelompokData->jenis_sumber)) {
                    case 'SQL';
                        $sqlQuery = '';
                        $connection = ConnectionManager::get('default');

                        // Get SQL Query and Eval SQL String
                        eval("\$sqlQuery = \"$kelompokData->sql\";");
                        $this->log($sqlQuery, LogLevel::INFO);

                        // If Page and Limit query string is passed
                        if (isset($page) && isset($limit)) {
                            // BEGIN - Query to count
                            $count = 0;
                            $total_pages = 0;
                            $sqlQueryCount = "SELECT COUNT (*) AS total FROM ( $sqlQuery ) CG_TABLE";
                            $countResult = $connection->query($sqlQueryCount)->fetch('assoc');

                            if ($countResult) {
                                $count = $countResult['total'];
                                if ($count > 0) {
                                    $total_pages = ceil($count / $limit);
                                }
                            }

                            if ($page > $total_pages) $page = $total_pages;
                            $start = $limit * $page - $limit; // do not put $limit*($page - 1)
                            // END - Query to count

                            // BEGIN - Query SELECT Data and build pagination component
                            $sqlQueryData = "$sqlQuery LIMIT $limit OFFSET $start";
                            $results = $connection->query($sqlQueryData)->fetchAll('assoc');

                            $data[$kelompokData->label_kelompok] = $this->addRowNumber($results);
                            $data['page'] = $page;
                            $data['limit'] = $limit;
                            $data['total_items'] = $count;
                            // END - Query SELECT Data
                        } else {
                            // Otherwise, just Execute the query and parse the result
                            $results = $connection->execute($sqlQuery)->fetchAll('assoc');
                            $data[$kelompokData->label_kelompok] = $results;
                        }

                        break;
//                case 'Wizard':
//                    break;
//                default:
//                    $this->response->statusCode(422);
//                    return;
//                    break;
                }
            }

            // If chart_type is passed, build 'cols' data
            if (isset($chart_type) &&
                array_key_exists('rows', $data) && 
                !array_key_exists('cols', $data)
            ) {
                if (isset($data['rows'][0])) {
                    $cols = [];
                    $i = 1;
                    $firstRecord = $data['rows'][0];
                    foreach ($firstRecord as $fieldName => $val) {
                        if (is_numeric($val)) {
                            $fieldType = 'number';
                        } else {
                            $fieldType = 'string';
                        }
                        $cols[] = [
                            'lbl_id' => $i++,
                            'type' => $fieldType,
                            'label' => Inflector::humanize($fieldName)
                        ];
                    }
                    $data['cols'] = $cols;
                }
            }

            $this->setResponseData($data, true, '');
        } catch (\Exception $e) {
            $this->log($e->getMessage());
            $response = $this->response->withStatus(400);
            return $response;
        }
    }

    public function combogrid($kelompokDataId)
    {
        $page = !empty($this->request->query['page']) ? (int)$this->request->query["page"] : 1; // get the requested page
        $limit = !empty($this->request->query['rows']) ? (int)$this->request->query["rows"] : 10; // get how many rows we want to have into the grid
        $sidx = !empty($this->request->query['sidx']) ? $this->request->query["sidx"] : 'id'; // get index row - i.e. user click to sort
        $sord = !empty($this->request->query['sord']) ? $this->request->query["sord"] : 'ASC'; // get the direction
        $q = !empty($this->request->query['searchTerm']) ? '%' . $this->request->query["searchTerm"] . '%' : '%';

        // initialize variables
        $user_id = null;
        $instansi_id = null;
        $unit_id = null;
        $pegawai_id = null;
        $peran_id = null;
        
        // get variables value
        extract($this->getUserSessionVars());

        $response = $this->response->withHeader('Access-Control-Allow-Origin', '*');
        $response = $response->withHeader('Access-Control-Allow-Headers', 'origin, x-requested-with, content-type, accept');
        $response = $response->withHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');

        $kelompokDataTable = TableRegistry::get('KelompokData');
        $kelompokData = $kelompokDataTable->find()
            ->select(['id', 'template_data_id', 'label_kelompok', 'jenis_sumber', 'sql'])
            ->where(['id' => $kelompokDataId])
            ->first();

        if (!$kelompokData) {
            return $response = $response->withStatus(404);
        }

        $sqlQuery = '';
        $total_pages = 0;
        $count = 0;
        $rows = [];

        switch (strtoupper($kelompokData->jenis_sumber)) {
            case 'SQL';
                try { // Try executing SQL Query
                    $connection = ConnectionManager::get('default');

                    // Get SQL Query and Eval SQL String
                    eval("\$sqlQuery = \"$kelompokData->sql\";");

                    // BEGIN - Query to count
                    $sqlQueryCount = "SELECT COUNT (*) AS total FROM ( $sqlQuery ) CG_TABLE";
                    $countResult = $connection->query($sqlQueryCount)->fetch('assoc');
                    if ($countResult) {
                        $count = $countResult['total'];
                        if ($count > 0) {
                            $total_pages = ceil($count / $limit);
                        }
                    }

                    if ($page > $total_pages && $total_pages > 0) $page = $total_pages;
                    $start = $limit * $page - $limit; // do not put $limit*($page - 1)
                    // END - Query to count

                    // BEGIN - Query SELECT Data
                    $sqlQueryData = "$sqlQuery ORDER BY $sidx $sord LIMIT $limit OFFSET $start";
                    $results = $connection->query($sqlQueryData)->fetchAll('assoc');
                    if ($results) {
                        $rows = $results;
                    }
                    // END - Query SELECT Data
                } catch (Exception $e) {
                    $this->log($e->getMessage());
                    return false;
                }
                break;
//                case 'Wizard':
//                    break;
//                default:
//                    $this->response->statusCode(422);
//                    return;
//                    break;

        }

        $total = $total_pages;
        $records = $count;

        $this->response = $response;
        $this->set(compact('page', 'total', 'records', 'rows'));
        $this->set('_serialize', ['page', 'total', 'records', 'rows']);
    }

    /**
     * Upload Template Data file
     */
    public function upload()
    {
        $data = [];
        $success = false;
        $message = '';

        try {
            UploadService::setInstansiID($this->getInstansiIdFromDataOrSession());
            $uploadData = UploadService::upload('file', 'template');
            $data['file_name'] = $uploadData['file_name'];
            $data['file_url'] = $uploadData['url'];

            $success = true;
            $message = 'File template berhasil diupload';
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    public function downloadFile($filename)
    {
        $templateDir = new Folder(WWW_ROOT . 'files' . DS . 'template');
        if (!$templateDir->path) {
            throw new \Exception('Folder tidak dapat diakses');
        }

        $filePath = $templateDir->path . DS . $filename;
        if (!file_exists($filePath)) {
            throw new \Exception('Path file tidak dapat diakses');
        }

        $response = $this->response->withFile(
            $filePath,
            ['download' => true, 'name' => $filename]
        );

        return $response;
    }

    private function parseQueryString($queries)
    {
        $filters = [
            'key_id' => !empty($queries['key_id']) ? (int)$queries['key_id'] : 0,
            'q' => !empty($queries['q']) ? (string) $queries['q'] : '',
            'page' => !empty($queries['page']) ? (int) $queries['page'] : null,
            'limit' => !empty($queries['limit']) ? (int) $queries['limit'] : null,
        ];

        // Parse additional query string
        foreach ($queries as $qsKey => $qsValue) {

            if (!in_array($qsKey, $this->reservedQueryString)) {

                if (!empty($qsValue)) {
                    // Try to convert to date
                    if ($newVal = DynamicFormService::parseDate($qsValue)) {
                        $filters[$qsKey] = $newVal->format(DynamicFormService::getDbDateFormat());
                    } else {
                        $filters[$qsKey] = $qsValue;
                    }
                } else {
                    $filters[$qsKey] = '';
                }
            }
        }

        return $filters;
    }

    /**
     * Generate Report dari Template JRXML menjadi File PDF
     * @param $templateDataId
     */
    public function generateReport(
        $templateDataId, $asPdf = false, $outputAsResponse = true
    ) {
        try {
            // default param
            $key_id = null;

            // Parse the query string
            $filters = $this->parseQueryString($this->request->query);
            extract($filters);

            // set session user variables value
            ReportGeneratorService::setUserVars($this->getUserSessionVars());

            $templateDataTable = TableRegistry::get('TemplateData');
            $templateData = $templateDataTable->find('all', [
                'contain' => [
                    'KelompokData'
                ],
                'conditions' => [
                    'TemplateData.id' => $templateDataId,
                    'TemplateData.tipe_keluaran' => $templateDataTable::TIPE_DOKUMEN
                ]
            ])->firstOrFail();

            if (empty($templateData)) {
                throw new \Exception('Setting Template Data tidak ditemukan');
            }

            if (!$templateData->template_dokumen) {
                throw new \Exception('Template dokumen kosong');
            }

            if (empty($templateData->kelompok_data)) {
                throw new \Exception('Setting Kelompok Data belum diisi');
            }

            $data = ReportGeneratorService::getData($templateData, $key_id, $filters);
            if (!$data) {
                throw new \Exception('Tidak ada data untuk report ini');
            }

            $templateDir = new Folder(WWW_ROOT . 'files' . DS . 'template');
            $resultDir = new Folder(WWW_ROOT . 'files' . DS . 'result');
            $dataSourceDir = new Folder(WWW_ROOT . 'files' . DS . 'datasource');

            if (!$templateDir->path || !$resultDir->path || !$dataSourceDir->path) {
                throw new \Exception('Direktori Template, Result, atau DataSource tidak dapat diakses');
            }

            $templateFilePath = $templateDir->path . DS . $templateData->template_dokumen;
            if (!file_exists($templateFilePath)) {
                throw new \Exception('File Template tidak dapat diakses');
            }

            $ext = pathinfo($templateDir->path . DS . $templateData->template_dokumen, PATHINFO_EXTENSION);

            switch ($ext) {
                case 'jrxml':
                    // Generate Report
                    ReportGeneratorService::generateJasperReport($key_id, $templateData, $data, $templateFilePath, $resultDir->path, $dataSourceDir->path);
                    $outputFilePath = ReportGeneratorService::getOutputFilePath();

                    if (!$outputAsResponse) {
                        return $outputFilePath;
                    }

                    // Serve as Download File
                    if (file_exists($outputFilePath)) {
                        $response = $this->response->withHeader('Access-Control-Allow-Origin', '*');
                        $response = $response->withHeader('Access-Control-Allow-Headers', 'origin, x-requested-with, content-type, accept');
                        $response = $response->withHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
                        $response = $response->withHeader('Access-Control-Expose-Headers', 'Content-Disposition');
                        $response = $response->withFile(
                            $outputFilePath,
                            [
                                'download' => true
                            ]
                        );
                        return $response;
                    } else {
                        throw new \Exception('Terjadi kesalahan ketika generate report. Silahkan coba lagi.');
                    }

                    break;

                case 'docx':
                     // Generate Report
                    $asPdf = $templateData->tipe_keluaran == $this->TemplateData::TIPE_DOKUMEN && !$asPdf ?
                        $templateData->output_as_pdf : $asPdf;
                    ReportGeneratorService::setSaveAsPdf($asPdf);
                    ReportGeneratorService::generateWordReport($key_id, $templateData, $data, $templateFilePath, $resultDir->path, $dataSourceDir->path);
                    $outputFilePath = ReportGeneratorService::getOutputFilePath();
//                    $outputFilePath = '/Users/indra/Sites/custom/sic-api/tests/TestCase/files/sample_contract.pdf';

                    if (!$outputAsResponse) {
                        return $outputFilePath;
                    }

                    // Serve as Download File
                    if (file_exists($outputFilePath)) {
                        $response = $this->response->withHeader('Access-Control-Allow-Origin', '*');
                        $response = $response->withHeader('Access-Control-Allow-Headers', 'origin, x-requested-with, content-type, accept');
                        $response = $response->withHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
                        $response = $response->withHeader('Access-Control-Expose-Headers', 'Content-Disposition');
                        $response = $response->withFile(
                            $outputFilePath,
                            [
                                'download' => true
                            ]
                        );
                        return $response;
                    } else {
                        throw new \Exception('Terjadi kesalahan ketika generate report. Silahkan coba lagi.');
                    }
                    break;

                case 'odt':
                    // Generate Report
                    ReportGeneratorService::generateOdtReport($key_id, $templateData, $data, $templateFilePath, $resultDir->path);
                    $outputFilePath = ReportGeneratorService::getOutputFilePath();

                    if (!$outputAsResponse) {
                        return $outputFilePath;
                    }

                    // Serve as Download File
                    if (file_exists($outputFilePath)) {
                        $response = $this->response->withHeader('Access-Control-Allow-Origin', '*');
                        $response = $response->withHeader('Access-Control-Allow-Headers', 'origin, x-requested-with, content-type, accept');
                        $response = $response->withHeader('Access-Control-Allow-Methods', 'OPTIONS, GET');
                        $response = $response->withHeader('Access-Control-Expose-Headers', 'Content-Disposition');
                        $response = $response->withHeader('Content-Type', 'application/vnd.oasis.opendocument.text');
                        $response = $response->withFile(
                            $outputFilePath,
                            [
                                'download' => true
                            ]
                        );
                        return $response;
                    } else {
                        throw new \Exception('Terjadi kesalahan ketika generate report. Silahkan coba lagi.');
                    }

                    break;

                default:
                    throw new \Exception('Format Template harus .jrxml, .docx atau .odt');
                    break;
            }
        } catch (\Exception $ex) {
            $this->setResponseData(null, false, $ex->getMessage());
        }
    }

    public function generateReportToSign($templateDataId) {
        $this->generateReport($templateDataId, true);
    }

    public function signReport()
    {
        $data = [];
        $success = false;
        $message = '';

        try {
            $certData = base64_decode($this->request->data['cert']);
            $prosesPermohonanId = $this->request->data['proses_permohonan_id'];
            $pass = $this->request->data['pass'];

            $ProsesPermohonanTable = TableRegistry::get('ProsesPermohonan');
            $prosesPermohonan = $ProsesPermohonanTable->get($prosesPermohonanId);
            $pdfPath = $this->generateReport($prosesPermohonan->template_data_id, true, false);

            $signedPdfName = \App\Service\ReportGeneratorService::signPdf(
                $pdfPath, $certData, $pass
            );

            if (!$signedPdfName) {
                throw new \Exception('Proses sign tidak berhasil');
            }

            // remove older file if any
            if (!is_null($prosesPermohonan->file_signed_report)) {
                $oldFile = new File(
                    ReportGeneratorService::getResultFolderPath() . DS . $prosesPermohonan->file_signed_report
                );
                if ($oldFile->exists()) {
                    $oldFile->delete();
                }
            }

            // Save nama file ke proses_permohonan
            $prosesPermohonan->file_signed_report = $signedPdfName;
            $prosesPermohonan->tgl_signed_report = Time::now();

            if (!$ProsesPermohonanTable->save($prosesPermohonan)) {
                throw new \Exception('Tidak berhasil menyimpan Signed Report');
            }

            $success = true;
            $message = 'Proses sign berhasil';
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->log($ex->getMessage(), LogLevel::ERROR);
        }

        $this->setResponseData($data, $success, $message);
    }

    public function testReport()
    {
        $templatePath = WWW_ROOT . 'files' . DS . 'template' . DS . 'template-sample.odt';
        $outputFolder = WWW_ROOT . 'files' . DS . 'result';

        $easyReportPath = realpath('./src/Library/PHP-Easy-Report/src/EasyReport.php');
        require $easyReportPath;

        $docGenerator = new \EasyReport($templatePath, $outputFolder);

        $data = array(
            'name' => 'Iván Guardado Castro',
            'link' => 'ivanguardado.com',
            'visits' => array(
                array('Nombrea', 'Fecha acceso', 'Tiempo visita'),
                array('Emilio Nicolás', '20/10/2011', '5 min'),
                array('Javier López', '20/10/2011', '1m'),
                array('Adrián Mato', '19/10/2011', '2 min'),
                array('Jesús Pérez', '18/10/2011', '8 min')
            ));

        $docGenerator->create( $outputFolder . DS . 'final.odt', $data);

//        $docGenerator->create($outputFolder . DS . 'final.doc', $data);

//        $docGenerator->create($outputFolder . DS . 'final.pdf', $data);

        return;
    }

    public function testQuery()
    {
        $data = [];
        $success = false;
        $message = '';
        $limit = 10;

        try {
            // initialize variables
            $user_id = null;
            $instansi_id = null;
            $unit_id = null;
            $pegawai_id = null;
            $peran_id = null;
            $key_id = $this->request->getData('key_id');
            $customVariables = explode('&', $this->request->getData('custom_variables'));

            // Get variables value
            foreach ($this->getUserSessionVars() as $key => $val) {
                // if null, the variable can be overriden by POST body
                if (is_null($val)) {
                    $$key = $this->request->getData($key);
                } else {
                    $$key = $val;
                }

                unset($key);
                unset($val);
            }

            // Parse Custom Variables
            foreach ($customVariables as $customVariable) {
                $keyValSplit = explode('=', $customVariable);

                if (!empty($keyValSplit) && preg_match('/\$[a-zA-Z]/i', $keyValSplit[0])) {
                    $key = str_replace('$','', $keyValSplit[0]);
                    $$key = $keyValSplit[1] ?: null;
                }

                unset($keyValSplit);
            }

            // Get SQL Query and Eval SQL String
            $sql = $this->request->getData('sql');
            eval("\$sql = \"$sql\";");
            $sql = "SELECT * FROM ($sql) result LIMIT $limit";
            $this->log($sql, LogLevel::INFO);

            $connection = ConnectionManager::get('default');
            $data = $connection->query($sql)->fetchAll('assoc');
            $success = true;
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    public function testGetPdfSign()
    {
        $filename = 'PDF_1.pdf';
        $templateDir = new Folder(WWW_ROOT . 'files' . DS . 'result');

        if (!$templateDir->path) {
            throw new \Exception('Folder tidak dapat diakses');
        }

        $filePath = $templateDir->path . DS . $filename;

        if (!file_exists($filePath)) {
            throw new \Exception('Path file tidak dapat diakses');
        }

        $response = $this->response->withFile(
            $filePath,
            ['download' => true, 'name' => $filename]
        );

        return $response;
    }
}
