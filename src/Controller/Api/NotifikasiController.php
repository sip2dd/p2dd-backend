<?php
namespace App\Controller\Api;

use App\Model\Entity\Notifikasi;

/**
 * Notifikasi Controller
 *
 * @property \App\Model\Table\NotifikasiTable $Notifikasi
 */
class NotifikasiController extends ApiController
{
    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Notifikasi->NotifikasiDetail->Jabatan->setInstansi($this->getCurrentInstansi());
    }

    /**
     * View method
     *
     * @param string|null $jenisIzinId Jenis Izin id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($jenisIzinId = null)
    {
        $success = true;
        $message = '';

        $notifikasi = $this->Notifikasi->JenisIzin->find('all', [
            'fields' => [
                'id', 'jenis_izin'
            ],
            'contain' => [
                'JenisPengajuan' => [
                    'fields' => ['id', 'jenis_izin_id', 'alur_proses_id', 'jenis_pengajuan']
                ],
                'JenisPengajuan.AlurProses' => [
                    'fields' => ['id', 'keterangan']
                ],
                'JenisPengajuan.AlurProses.DaftarProses' => function (\Cake\ORM\Query $query) {
                    return $query
                        ->select(['id', 'no', 'alur_proses_id', 'jenis_proses_id', 'nama_proses', 'tipe'])
                        ->orderAsc('no');
                },
                'Notifikasi' => [
                    'fields' => ['id', 'jenis_izin_id']
                ],
                'Notifikasi.NotifikasiDetail' => [
                    'fields' => [
                        'id', 'notifikasi_id', 'daftar_proses_id', 'tipe', 
                        'format_pesan', 'tipe_penerima', 'jabatan_id'
                    ]
                ]
            ],
            'conditions' => [
                'JenisIzin.id' => $jenisIzinId
            ]
        ])->first();

        $mapDetail = [];

        if ($notifikasi->notifikasi && $notifikasi->notifikasi->notifikasi_detail) {  

            foreach ($notifikasi->notifikasi->notifikasi_detail as $notifikasiDetail) {
                $mapDetail[$notifikasiDetail->daftar_proses_id][] = $notifikasiDetail;
            }

            unset($notifikasi->notifikasi->notifikasi_detail);
        }

        if ($notifikasi) {
            // TODO read proses from overriden alur proses
            foreach ($notifikasi->jenis_pengajuan as &$jenisPengajuan) {
                foreach ($jenisPengajuan->alur_prose->daftar_proses as &$daftarProses) {
                    if (array_key_exists($daftarProses->id, $mapDetail)) {
                        $daftarProses->details = $mapDetail[$daftarProses->id];
                    } else {
                        $daftarProses->details = [];
                    }
                }
            }
        }

        $this->setResponseData($notifikasi, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Jenis Izin id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($jenisIzinId = null)
    {
        $success = false;
        $message = '';
        $notifikasi = null;
        $isNew = false;
        $patchData = null;

        $notifikasi = $this->Notifikasi->find('all', [
            'fields' => [
                'id', 'jenis_izin_id'
            ],
            'contain' => [
                'NotifikasiDetail' => [
                    'fields' => [
                        'id', 'notifikasi_id', 'daftar_proses_id', 'tipe',
                        'format_pesan', 'tipe_penerima', 'jabatan_id'
                    ]
                ]
            ],
            'conditions' => [
                'jenis_izin_id' => $jenisIzinId
            ]
        ])->first();

        if (!$notifikasi) {
            $notifikasi = $this->Notifikasi->newEntity();
            $isNew = true;
        }

        if ($this->request->is(['patch', 'post', 'put'])) {
            if ($isNew) {
                $patchData = ['jenis_izin_id' => $jenisIzinId];
            }

            // Parse Notifikasi Detail setting data
            foreach ($this->request->data['jenis_izin']['jenis_pengajuan'] as $pengajuan) {
                foreach ($pengajuan['alur_prose']['daftar_proses'] as $daftarProses) {
                    foreach ($daftarProses['details'] as $detail) {
                        $patchData['notifikasi_detail'][] = $detail;
                    }
                }
            }

            // return $this->setResponseData($patchData, false);
            $notifikasi = $this->Notifikasi->patchEntity($notifikasi, $patchData,
                [
                    'associated' => ['NotifikasiDetail']
                ]
            );

            if ($this->Notifikasi->save($notifikasi)) {
                $success = true;
                $message = __('Notifikasi berhasil disimpan.');
            } else {
                $this->setErrors($notifikasi->errors());
                $message = __('Notifikasi tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($notifikasi, $success, $message);
    }

    public function getSupportData()
    {
        $success = true;
        $message = '';
        $tipeList = [];
        $tipePenerimaList = [];

        // List Tipe Pesan
        $tipeList[] = [
            'kode' => 'email',
            'label' => 'E-mail',
        ];
        $tipeList[] = [
            'kode' => 'sms',
            'label' => 'SMS',
        ];

        // List Tipe Penerima
        $tipePenerimaList[] = [
            'kode' => 'pemohon',
            'label' => 'Pemohon'
        ];
        $tipePenerimaList[] = [
            'kode' => 'jabatan',
            'label' => 'Jabatan'
        ];

        // List Jabatan
        $jabatan = $this->Notifikasi->NotifikasiDetail->Jabatan->find(
            'all',
            [
                'fields' => ['id', 'jabatan'],
                'limit' => $this->_autocompleteLimit
            ]
        );

        $data = [
            'tipelist' => $tipeList,
            'tipepenerimalist' => $tipePenerimaList,
            'jabatanlist' => $jabatan
        ];

        $this->setResponseData($data, $success, $message);
    }

    public function deleteNotifikasiDetail($notifikasiDetailId)
    {
        $success = false;
        $message = '';

        $this->request->allowMethod(['post', 'delete']);
        $notifikasiDetail = $this->Notifikasi->NotifikasiDetail->get($notifikasiDetailId);

        if ($this->Notifikasi->NotifikasiDetail->delete($notifikasiDetail)) {
            $success = true;
            $message = __('Detail berhasil dihapus.');
        } else {
            $message = __('Detail tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($notifikasiDetail, $success, $message);
    }
}
