<?php
namespace App\Controller\Api;

use App\Controller\Api\ApiController;
use App\Model\Entity\CAduan;
use App\Model\Entity\Pegawai;
use App\Model\Entity\PenanggungJawabPeran;
use App\Model\Entity\CAduanKomentar;
use App\Model\Entity\CAduanLampiran;
use App\Service\UploadService;
use App\Service\NumberingService;
use Cake\Datasource\ConnectionManager;

/**
 * CAduan Controller
 *
 * @property \App\Model\Table\CAduanTable $CAduan
 *
 * @method \App\Model\Entity\CAduan[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class CaduanController extends ApiController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['getList']);
    }

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event);
        $this->CAduan = $this->loadModel('CAduan');
        $this->CAduanKomentar = $this->loadModel('CAduanKomentar');
        $this->CAduanLampiran = $this->loadModel('CAduanLampiran');
        $this->Pegawai = $this->loadModel('Pegawai');
        $this->PenanggungJawabPeran = $this->loadModel('PenanggungJawabPeran');
    }

    public function downloadFile($id)
    {
        $dokumenAduan = $this->CAduanLampiran->get($id);
        return $this->_downloadFile($dokumenAduan->file_lampiran, 'dokumen_pemohon');
    }

    public function downloadFileKomentar($id)
    {
        $dokumenAduanKomentar = $this->CAduanKomentar->get($id);
        return $this->_downloadFile($dokumenAduanKomentar->file_lampiran, 'dokumen_pemohon');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $success = true;
        $message = '';
        $this->paginate = [
            'contain' => [
                'CAduanKomentar' => [
                    'fields' => [
                    ]
                ],
                'CAduanLampiran' => [
                    'fields' => [
                    ]
                ]
            ],
            'conditions' => [
                'CAduan.del' => 0,
                'OR' => [
                    'CAduan.aduan ILIKE' => '%' . $this->_apiQueryString . '%',
                    'CAduan.no_tiket ILIKE' => '%' . $this->_apiQueryString . '%'
                ],
                'OR' => [
                    'CAduan.status !=' => 'open',
                    'AND' => [
                        'CAduan.status' => 'open',
                        'CAduan.dibuat_oleh' => $this->getCurrentUsername()
                    ]
                ],
                'CAduan.kategori !=' => 'inovasi'
            ],
            'order' => [
                'CAduan.tgl_diubah DESC'
            ]
        ];

        if ($this->request->getQuery('status')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'status' => $this->request->getQuery('status')
                ]
            ]);
        }

        if ($this->request->getQuery('kategori')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'kategori' => $this->request->getQuery('kategori')
                ]
            ]);
        }

        $caduan = $this->paginate($this->CAduan);
        if ($caduan->count() > 0) {
            foreach ($caduan as $value) {
                $value->flag_status = 'false';
                if ($value->status == 'close' && $value->dibuat_oleh == $this->getCurrentUsername()) {
                    $value->flag_status = 'true';
                }
            }
        }

        $paging = $this->request->params['paging']['CAduan'];
        $caduan = $this->addRowNumber($caduan);
        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $caduan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    public function getAduanList()
    {
        $success = true;
        $message = '';
        $this->CAduan->setFilteredBeforeFind(false);
        $aduans = $this->CAduan->find('all');
        $data = array(
            'items' => $aduans
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id C Aduan id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        //get name pegawai
        $nama_pegawai = '';
        $pegawai_id = $this->getCurrentUser()->pegawai_id;
        if($pegawai_id != ''){
            $pegawai = $this->Pegawai->get($pegawai_id, [
                'contain' => [
                    'Instansi' => ['fields' => ['id', 'nama', 'tipe', 'parent_id']],
                    'Unit' => ['fields' => ['id', 'nama', 'tipe', 'parent_id']],
                    'Jabatan' => ['fields' => ['id', 'jabatan', 'nama_jabatan', 'instansi_id']]
                ]
            ]);
            $nama_pegawai = $pegawai->nama;
        }

        //default condition
        $condition = array('CAduan.penanggung_jawab IS NULL', 'CAduan.penanggung_jawab' => $nama_pegawai);

        //get reviewer
        $reviewer = false;
        $peran_id = $this->getCurrentUser()->peran_id;
        $peran = $this->PenanggungJawabPeran->find('all', [
            'fields' => ['reviewer'],
            'conditions' => [
                'peran_id' => $peran_id,
                'del' => 0
            ]
        ])->first();

        if(!empty($peran)){
            $reviewer = true;
        }

        $cAduan = $this->CAduan->get($id, [
            'fields' => [
                'CAduan.id', 'CAduan.kategori', 'CAduan.aduan',
                'CAduan.status', 'CAduan.penyelesaian', 'CAduan.tgl_aduan',
                'CAduan.tgl_penyelesaian', 'CAduan.penanggung_jawab', 'CAduan.no_tiket', 'CAduan.type'
            ],
            'contain' => [
                'CAduanKomentar' => ['fields' => ['id', 'c_aduan_id', 'file_lampiran', 'komentar', 'pengguna','del','tgl_dibuat','dibuat_oleh']],
                'CAduanLampiran' => ['fields' => ['id', 'c_aduan_id', 'file_lampiran', 'keterangan','del']]
            ]
        ]);

        //get condition penanggung jawab
        $penanggung_jawab_status = false;
        if($cAduan['penanggung_jawab'] == $nama_pegawai){
            $penanggung_jawab_status = true;
        }

        $cAduan['tgl_aduan'] = !isset($cAduan['tgl_aduan']) ? null : date_format($cAduan['tgl_aduan'],'Y-m-d');
        $cAduan['reviewer'] = $reviewer;
        $cAduan['penanggung_jawab_status'] = $penanggung_jawab_status;
        $success = true;
        $message = '';
        $reviewer = true;
        $this->setResponseData($cAduan, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $this->request->data['tgl_aduan'] = !isset($this->request->data['tgl_aduan']) ? null : date_create($this->request->data['tgl_aduan']);
        $cAduan = $this->CAduan->newEntity();

        if ($this->request->is('post')) {
            $cAduan = $this->CAduan->patchEntity($cAduan, $this->request->data);
            if ($this->CAduan->save($cAduan)) {
                $success = true;
                $message = __('aduan berhasil disimpan.');
            } else {
                $message = __('aduan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($cAduan, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id C Aduan id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id)
    {
        $success = false;
        $message = '';

        $this->request->data['tgl_aduan'] = !isset($this->request->data['tgl_aduan']) ? null : date_create($this->request->data['tgl_aduan']);
        if (array_key_exists('c_aduan_lampiran',$this->request->data)) {
            $this->request->data['c_aduan_lampiran'][0]['file_lampiran'] = !isset($this->request->data['file_lampiran']) ? $this->request->data['c_aduan_lampiran'][0]['file_lampiran'] : $this->request->data['file_lampiran'];
        }
        $aduan = $this->CAduan->get($id, []);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $aduan = $this->CAduan->patchEntity($aduan, $this->request->data);
            if ($this->CAduan->save($aduan)) {
                if ($this->request->data['lokasi_dokumen_lampiran']!='') {
                    $aduanKomentar = $this->CAduanKomentar->newEntity();
                    $aduanLampiran = $this->CAduanLampiran->newEntity();

                    if(array_key_exists('c_aduan_lampiran',$this->request->data)){
                        $this->request->data['lokasi_dokumen_lampiran'] = !isset($this->request->data['lokasi_dokumen_lampiran']) ? $this->request->data['c_aduan_lampiran'][0]['file_lampiran'] : $this->request->data['lokasi_dokumen_lampiran'];
                        $this->request->data['keterangan_lampiran'] = !isset($this->request->data['keterangan_lampiran']) ? $this->request->data['c_aduan_lampiran'][0]['keterangan'] : $this->request->data['keterangan_lampiran'];
                    }

                    $dataLampiran = [
                        'id' => null,
                        'c_aduan_id' => $id,
                        'del' => 0,
                        'keterangan' => $this->request->data['keterangan_lampiran'],
                        'file_lampiran' => $this->request->data['lokasi_dokumen_lampiran']
                    ];

                    if ($this->request->is(['patch', 'post', 'put'])) {
                        $this->CAduanLampiran->deleteAll(array('CAduanLampiran.c_aduan_id'=>$id));
                        $aduanLampiran = $this->CAduanLampiran->patchEntity($aduanLampiran, $dataLampiran);
                        if ($this->CAduanLampiran->save($aduanLampiran)) {
                            $success = true;
                            $message = __('aduan berhasil disimpan.');
                        } else {
                            $message = __('aduan tidak berhasil disimpan. Silahkan coba kembali');
                        }
                    }
                }else{
                    $success = true;
                    $message = __('aduan berhasil disimpan.');
                }
            } else {
                $message = __('aduan tidak berhasil disimpan. Silahkan coba kembali');
            }
        }

        $this->setResponseData($aduan, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function addKomentar($id)
    {
        $success = false;
        $message = '';
        $aduanKomentar = $this->CAduanKomentar->newEntity();

        if ($this->request->is('post')) {
            $aduanKomentar = $this->CAduanKomentar->patchEntity($aduanKomentar, $this->request->data);
            if ($this->CAduanKomentar->save($aduanKomentar)) {
                $success = true;
                $message = __('Komentar berhasil disimpan.');
            } else {
                $message = __('Komentar tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($aduanKomentar, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id C Aduan id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $this->request->allowMethod(['post', 'delete']);

        $cAduan = $this->CAduan->get($id);
        $del = [
            'id' => $id,
            'del' => 1
        ];

        $aduan = $this->CAduan->patchEntity($cAduan, $del);

        if ($this->CAduan->save($aduan)) {
            $success = true;
            $message = __('Aduan berhasil didelete.');
        }else{
            $message = __('Aduan tidak berhasil didelete, mohon coba kembali.');
        }
        $this->setResponseData($cAduan, $success, $message);
    }

    public function uploadFile()
    {
        $data = [];
        $success = false;
        $message = '';

        try {
            UploadService::setInstansiID($this->getInstansiIdFromDataOrSession());
            $uploadData = UploadService::upload('file', 'upload');
            $data['file_name'] = $uploadData['file_name'];
            $data['file_url'] = $uploadData['url'];
            
            $success = true;
            $message = 'File berhasil diupload';
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getNumber()
    {
        $data = [];
        $success = false;
        $message = '';

        try {
            $number = NumberingService::getFormattedNbrMdl('aduan-add');
            
            if ($number) {
                $data['number'] = $number;
                $success = true;
                $message = 'Format number berhasil ditemukan';
            } else {
                $message = 'Format number tidak ditemukan';
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getKategoriList()
    {
        $success = true;
        $message = '';

        $connection = ConnectionManager::get('default');
        $kategori   = $connection
            ->execute("
                select path from (
                    WITH RECURSIVE menu_path(id, label, parent, path, tautan) AS (
                      select id, label_menu, parent_id, label_menu::text, tautan from menu where parent_id is null
                      UNION all
                      select a.id, a.label_menu, a.parent_id, path||' > '||a.label_menu, a.tautan from menu a
                      join menu_path b on a.parent_id = b.id
                    )
                    select path from menu_path where tautan <> '#'
                    UNION
                    select keterangan as path from c_data_umum where grup_kode = 'KL'
                ) kategori
                where LOWER(kategori.path) ILIKE :like
                order by path asc
                limit :limit
            ", [
                'like'  => '%' . $this->_apiQueryString . '%',
                'limit' => 10
            ])
            ->fetchAll('assoc');
        $data = array(
            'items' => $kategori
        );

        $this->setResponseData($data, $success, $message);
    }

    public function editAduan($id)
    {
        $success = false;
        $message = '';

        $this->request->data['tgl_aduan'] = !isset($this->request->data['tgl_aduan']) ? null : date_create($this->request->data['tgl_aduan']);
        $this->request->data['c_aduan_lampiran'][0]['file_lampiran'] = !isset($this->request->data['file_lampiran']) ? $this->request->data['c_aduan_lampiran'][0]['file_lampiran'] : $this->request->data['file_lampiran'];

        foreach ($this->request->data['c_aduan_komentar'] as $key => $value) {
            $this->request->data['c_aduan_komentar'][$key]['tgl_dibuat'] = !isset($value['tgl_dibuat']) ? null : date_create($value['tgl_dibuat']);
        }

        $aduan = $this->CAduan->get($id, [
            'contain' => [
                'CAduanLampiran', 'CAduanKomentar'
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $aduan = $this->CAduan->patchEntity($aduan, $this->request->data,['associated' => ['CAduanLampiran', 'CAduanKomentar']]);

            if ($this->CAduan->save($aduan)) {
                $success = true;
                $message = __('aduan berhasil disimpan.');
            } else {
                $message = __('aduan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($aduan, $success, $message);
    }

    public function reOpenStatus($id)
    {
        $success = false;
        $message = '';

        $aduan = $this->CAduan->get($id);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $aduan = $this->CAduan->patchEntity($aduan, $this->request->data);

            if ($this->CAduan->save($aduan)) {
                $success = true;
                $message = __('aduan berhasil dibuka kembali.');
            } else {
                $message = __('aduan tidak berhasil dibuka. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($aduan, $success, $message);
    }

    public function inovasiList()
    {
        $success = true;
        $message = '';
        $this->paginate = [
            'contain' => [
                'CAduanKomentar' => [
                    'fields' => [
                    ]
                ],
                'CAduanLampiran' => [
                    'fields' => [
                    ]
                ]
            ],
            'conditions' => [
                'CAduan.del' => 0,
                'OR' => [
                    'CAduan.aduan ILIKE' => '%' . $this->_apiQueryString . '%',
                    'CAduan.no_tiket ILIKE' => '%' . $this->_apiQueryString . '%'
                ],
                'OR' => [
                    'CAduan.status !=' => 'pengajuan',
                    'AND' => [
                        'CAduan.status' => 'pengajuan',
                        'CAduan.dibuat_oleh' => $this->getCurrentUsername()
                    ]
                ],
                'CAduan.kategori' => 'inovasi'
            ],
            'order' => [
                'CAduan.tgl_diubah DESC'
            ]
        ];

        if ($this->request->getQuery('status')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'status' => $this->request->getQuery('status')
                ]
            ]);
        }

        if ($this->request->getQuery('kategori')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'kategori' => $this->request->getQuery('kategori')
                ]
            ]);
        }

        $caduan = $this->paginate($this->CAduan);
        if ($caduan->count() > 0) {
            foreach ($caduan as $value) {
                $value->flag_status = 'false';
                if ($value->status == 'close' && $value->dibuat_oleh == $this->getCurrentUsername()) {
                    $value->flag_status = 'true';
                }
            }
        }

        $paging = $this->request->params['paging']['CAduan'];
        $caduan = $this->addRowNumber($caduan);
        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $caduan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    public function inovasiListProsesPengembangan()
    {
        $success = true;
        $message = '';

        //get name pegawai
        $nama_pegawai = '';
        $pegawai_id = $this->getCurrentUser()->pegawai_id;
        if($pegawai_id != ''){
            $pegawai = $this->Pegawai->get($pegawai_id, [
                'contain' => [
                    'Instansi' => ['fields' => ['id', 'nama', 'tipe', 'parent_id']],
                    'Unit' => ['fields' => ['id', 'nama', 'tipe', 'parent_id']],
                    'Jabatan' => ['fields' => ['id', 'jabatan', 'nama_jabatan', 'instansi_id']]
                ]
            ]);
            $nama_pegawai = $pegawai->nama;
        }

        //default condition
        $condition = array('CAduan.penanggung_jawab IS NULL', 'CAduan.penanggung_jawab' => $nama_pegawai);

        //get reviewer
        $reviewer = false;
        $peran_id = $this->getCurrentUser()->peran_id;
        $peran = $this->PenanggungJawabPeran->find('all', [
            'fields' => ['reviewer'],
            'conditions' => [
                'peran_id' => $peran_id,
                'del' => 0
            ]
        ])->first();

        if(!empty($peran)){
            $reviewer = true;
            $condition = array();
        }
        
        $this->paginate = [
            'contain' => [
                'CAduanKomentar' => [
                    'fields' => [
                    ]
                ],
                'CAduanLampiran' => [
                    'fields' => [
                    ]
                ]
            ],
            'conditions' => [
                'AND' => [
                    'CAduan.del' => 0,
                    'CAduan.kategori' => 'inovasi',
                    'OR' => $condition
                ]
            ],
            'order' => [
                'CAduan.tgl_diubah DESC'
            ]
        ];

        if ($this->request->getQuery('status')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'status' => $this->request->getQuery('status')
                ]
            ]);
        }

        if ($this->request->getQuery('kategori')) {
            if($this->request->getQuery('kategori') != 'null'){
                $this->CAduan = $this->CAduan->find('all',[
                    'conditions' => [
                        'kategori' => $this->request->getQuery('kategori')
                    ]
                ]);
            }
        }

        if ($this->request->getQuery('q')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'OR' => [
                        'CAduan.aduan LIKE' => '%' . $this->request->getQuery('q') . '%',
                        'CAduan.no_tiket LIKE' => '%' . $this->request->getQuery('q') . '%'
                    ]
                ]
            ]);
        }

        $caduan = $this->paginate($this->CAduan);
        if ($caduan->count() > 0) {
            foreach ($caduan as $value) {
                $value->flag_status = 'false';
                if ($value->status == 'close' && $value->dibuat_oleh == $this->getCurrentUsername()) {
                    $value->flag_status = 'true';
                }
            }
        }

        $paging = $this->request->params['paging']['CAduan'];
        $caduan = $this->addRowNumber($caduan);
        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $caduan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    public function penangananAduanList()
    {
        $success = true;
        $message = '';

        //get name pegawai
        $nama_pegawai = '';
        $pegawai_id = $this->getCurrentUser()->pegawai_id;
        if($pegawai_id != ''){
            $pegawai = $this->Pegawai->get($pegawai_id, [
                'contain' => [
                    'Instansi' => ['fields' => ['id', 'nama', 'tipe', 'parent_id']],
                    'Unit' => ['fields' => ['id', 'nama', 'tipe', 'parent_id']],
                    'Jabatan' => ['fields' => ['id', 'jabatan', 'nama_jabatan', 'instansi_id']]
                ]
            ]);
            $nama_pegawai = $pegawai->nama;
        }

        //default condition
        $condition = array('CAduan.penanggung_jawab IS NULL', 'CAduan.penanggung_jawab' => $nama_pegawai);

        //get reviewer
        $reviewer = false;
        $peran_id = $this->getCurrentUser()->peran_id;
        $peran = $this->PenanggungJawabPeran->find('all', [
            'fields' => ['reviewer'],
            'conditions' => [
                'peran_id' => $peran_id,
                'del' => 0
            ]
        ])->first();

        if(!empty($peran)){
            $reviewer = true;
            $condition = array();
        }
        
        $this->paginate = [
            'contain' => [
                'CAduanKomentar' => [
                    'fields' => [
                    ]
                ],
                'CAduanLampiran' => [
                    'fields' => [
                    ]
                ]
            ],
            'conditions' => [
                'AND' => [
                    'CAduan.del' => 0,
                    'CAduan.kategori !=' => 'inovasi',
                    'OR' => $condition
                ],
            ],
            'order' => [
                'CAduan.tgl_diubah DESC',
                'CAduan.penanggung_jawab ASC NULLS FIRST'
            ]
        ];

        if ($this->request->getQuery('status')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'status' => $this->request->getQuery('status')
                ]
            ]);
        }

        if ($this->request->getQuery('kategori')) {
            if($this->request->getQuery('kategori') != 'null'){
                $this->CAduan = $this->CAduan->find('all',[
                    'conditions' => [
                        'kategori' => $this->request->getQuery('kategori')
                    ]
                ]);
            }
        }

        if ($this->request->getQuery('q')) {
            $this->CAduan = $this->CAduan->find('all',[
                'conditions' => [
                    'OR' => [
                        'CAduan.aduan LIKE' => '%' . $this->request->getQuery('q') . '%',
                        'CAduan.no_tiket LIKE' => '%' . $this->request->getQuery('q') . '%'
                    ]
                ]
            ]);
        }

        $caduan = $this->paginate($this->CAduan);
        if ($caduan->count() > 0) {
            foreach ($caduan as $value) {
                $value->flag_status = 'false';
                if ($value->status == 'close' && $value->dibuat_oleh == $this->getCurrentUsername()) {
                    $value->flag_status = 'true';
                }
            }
        }

        $paging = $this->request->params['paging']['CAduan'];
        $caduan = $this->addRowNumber($caduan);
        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $caduan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }
}
?>