<?php
namespace App\Controller\Api;

use App\Controller\Api\ApiController;

/**
 * JenisProses Controller
 *
 * @property \App\Model\Table\JenisProsesTable $JenisProses
 */
class JenisProsesController extends ApiController
{

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->JenisProses->setInstansi($this->getCurrentInstansi());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $this->paginate = [
            'conditions' => [
                'OR' => [
                    'JenisProses.kode ILIKE' => '%' . $this->_apiQueryString . '%',
                    'JenisProses.nama_proses ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'order' => [
                'JenisProses.kode' => 'ASC',
                'JenisProses.nama_proses' => 'ASC',
            ]
        ];

        $jenisProses = $this->paginate($this->JenisProses);
        $paging = $this->request->params['paging']['JenisProses'];
        $jenisProses = $this->addRowNumber($jenisProses);
        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $jenisProses,
            'total_items' => $paging['count']
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Jenis Proses id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $jenisProses = $this->JenisProses->get($id, [
            'contain' => []
        ]);

        $this->setResponseData($jenisProses, $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $jenisProses = $this->JenisProses->find('all', [
            'fields' => [
                'id', 'nama_proses', 'tautan', 'is_drop'
            ],
            'conditions' => [
                'OR' => [
                    'kode ILIKE' => '%' . $this->_apiQueryString . '%',
                    'nama_proses ILIKE' => '%' . $this->_apiQueryString . '%',
                    'tautan ILIKE' => '%' . $this->_apiQueryString . '%',
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);
        $data = array(
            'items' => $jenisProses
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';
        $jenisProses = $this->JenisProses->newEntity();

        if ($this->request->is('post')) {
            $jenisProses = $this->JenisProses->patchEntity($jenisProses, $this->request->data);

            if ($this->JenisProses->save($jenisProses)) {
                $success = true;
                $message = __('jenis proses berhasil disimpan.');
            } else {
                $message = __('jenis proses tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($jenisProses, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Jenis Proses id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $jenisProses = $this->JenisProses->get($id, [
            'contain' => []
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $jenisProses = $this->JenisProses->patchEntity($jenisProses, $this->request->data);

            if ($this->JenisProses->save($jenisProses)) {
                $success = true;
                $message = __('jenis proses berhasil disimpan.');
            } else {
                $message = __('jenis proses tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($jenisProses, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Jenis Proses id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = [];

        $this->request->allowMethod(['post', 'delete']);
        $jenisProses = $this->JenisProses->get($id);

        if ($this->JenisProses->delete($jenisProses)) {
            $success = true;
            $message = __('jenis proses berhasil dihapus.');
        } else {
            $message = __('jenis proses tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }
}
