<?php
namespace App\Controller\Api;

use App\Model\Entity\Jabatan;

/**
 * Jabatan Controller
 *
 * @property \App\Model\Table\JabatanTable $Jabatan
 */
class JabatanController extends ApiController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event);
        $this->Jabatan->setInstansi($this->getCurrentInstansi());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $jabatanTable = $this->Jabatan;
        $this->paginate = [
            'conditions' => [
                'OR' => [
                    'LOWER(Jabatan.nama) ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ]
        ];

        $jabatan = $this->paginate($this->Jabatan);
        $paging = $this->request->params['paging']['Jabatan'];
        $jabatan = $this->addRowNumber($jabatan);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $jabatan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    public function getJabatanList()
    {
        $success = true;
        $message = '';
        $this->Jabatan->setFilteredBeforeFind(false);

        $jabatans = $this->Jabatan->find('all', [
            'fields' => ['Jabatan.id', 'Jabatan.jabatan', 'Jabatan.nama_jabatan'],
            'conditions' => [
                'OR' => [
                    'LOWER(Jabatan.jabatan) ILIKE' => '%' . $this->_apiQueryString . '%',
                    'LOWER(Jabatan.nama_jabatan) ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);

        $data = array(
            'items' => $jabatans
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Jabatan id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $this->Jabatan->setFilteredBeforeFind(false);
        $jabatan = $this->Jabatan->get($id);
        $this->setResponseData($jabatan, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $jabatan = $this->Jabatan->newEntity();

        if ($this->request->is('post')) {
            $jabatan = $this->Jabatan->patchEntity($jabatan, $this->request->data);

            if ($this->Jabatan->save($jabatan)) {
                $success = true;
                $message = __('Jabatan berhasil disimpan.');
            } else {
                $message = __('Jabatan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($jabatan, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Jabatan id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $jabatan = $this->Jabatan->get($id);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $jabatan = $this->Jabatan->patchEntity($jabatan, $this->request->data);

            if ($this->Jabatan->save($jabatan)) {
                $success = true;
                $message = __('Jabatan berhasil disimpan.');
            } else {
                $message = __('Jabatan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($jabatan, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Jabatan id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $jabatan = $this->Jabatan->get($id);

        if ($this->Jabatan->delete($jabatan)) {
            $success = true;
            $message = __('Jabatan berhasil dihapus.');
        } else {
            $success = __('Jabatan tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }
}
