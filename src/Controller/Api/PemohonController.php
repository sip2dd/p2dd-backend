<?php
namespace App\Controller\Api;

use App\Controller\Api\ApiController;
use App\Model\Entity\Pemohon;
use App\Model\Table\PemohonTable;
use App\Service\AuthService;
use App\Service\NotificationService;
use App\Service\DynamicFormService;
use Cake\I18n\Time;
use Cake\Http\Exception\NotFoundException;
use Cake\ORM\TableRegistry;
use Cake\I18n\FrozenDate;

/**
 * Pemohon Controller
 *
 * @property \App\Model\Table\PemohonTable $Pemohon
 */
class PemohonController extends ApiController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow([
            'search', 'link', 'getGenderList', 'getJenisIdentitasList', 'register',
            'verify', 'checkVerifyToken'
        ]);
    }

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Pemohon->setInstansi($this->getCurrentInstansi());
        $this->Pemohon->setUnit($this->getCurrentUnit());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $conditions = [
            'OR' => [
                'nama ILIKE' => '%' . $this->_apiQueryString . '%',
                'tipe_identitas ILIKE' => '%' . $this->_apiQueryString . '%',
                'no_identitas ILIKE' => '%' . $this->_apiQueryString . '%',
            ]
        ];

        if (isset($this->request->query['data_status'])) {
            $this->Pemohon->setFindDataStatus($this->request->query['data_status']);
        }

        $this->paginate = [
            'fields' => [
                'id', 'nama', 'tipe_identitas', 'no_identitas'
            ],
            'conditions' => $conditions,
            'order' => ['id' => 'DESC']
        ];

        $pemohon = $this->paginate($this->Pemohon);
        $paging = $this->request->params['paging']['Pemohon'];
        $pemohon = $this->addRowNumber($pemohon);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $pemohon,
            'total_items' => $paging['count']
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function getPerusahaanList()
    {
        $success = true;
        $message = '';

        $this->loadModel('Perusahaan');

        $conditions['OR'] = [
            'LOWER(Perusahaan.nama_perusahaan) ILIKE' => '%' . $this->_apiQueryString . '%',
            'LOWER(Perusahaan.npwp) ILIKE' => '%' . $this->_apiQueryString . '%',
            'LOWER(Perusahaan.no_register) ILIKE' => '%' . $this->_apiQueryString . '%'
        ];

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        if ($pemohonId) {
            $conditions['Perusahaan.pemohon_id'] = $pemohonId;
        }

        $this->paginate = [
            'fields' => [
                'id', 'nama_perusahaan', 'npwp', 'no_register', 'jenis_perusahaan'
            ],
            'conditions' => $conditions,
            'order' => ['id' => 'DESC']
        ];
        $perusahaan = $this->paginate($this->Perusahaan);
        $paging = $this->request->params['paging']['Perusahaan'];
        $perusahaan = $this->addRowNumber($perusahaan);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $perusahaan,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Pemohon id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        // If id is not provided, get pemohon from current user
        if (!$id) {
            $id = $this->getPemohonIdFromQueryStringOrSession();

            if (!$id) {
                throw new NotFoundException('Anda mengakses form ini secara ilegal');
            }
        }

        $this->Pemohon->setFindDataStatus(PemohonTable::DATA_STATUS_ALL);

        $pemohon = $this->Pemohon->get($id, [
            'fields' => [
                'id', 'nama', 'tipe_identitas', 'no_identitas', 'nama', 'tempat_lahir', 'tgl_lahir',
                'jenis_kelamin', 'pekerjaan', 'perusahaan_id', 'no_tlp', 'no_hp', 'email', 'alamat',
                'desa_id', 'kecamatan_id', 'kabupaten_id', 'provinsi_id', 'kode_pos'
            ],
            'contain' => [
                'Desa' => [
                    'fields' => ['id', 'kode_daerah', 'nama_daerah']
                ],
                'Kecamatan' => [
                    'fields' => ['id', 'kode_daerah', 'nama_daerah']
                ],
                'Kabupaten' => [
                    'fields' => ['id', 'kode_daerah', 'nama_daerah']
                ],
                'Provinsi' => [
                    'fields' => ['id', 'kode_daerah', 'nama_daerah']
                ],
                'Pengguna' => [
                    'fields' => ['id', 'username']
                ]
            ]
        ]);

        $this->setResponseData($pemohon, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $pemohon = $this->Pemohon->newEntity();

        if ($this->request->is('post')) {
            $pemohon = $this->Pemohon->patchEntity($pemohon, $this->request->data);
            $this->request->data['tgl_lahir'] = DynamicFormService::parseDate($this->request->data['tgl_lahir']);

            if ($this->Pemohon->save($pemohon)) {
                $success = true;
                $message = __('pemohon berhasil disimpan.');
            } else {
                $this->setErrors($pemohon->errors());
                $message = __('pemohon tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($pemohon, $success, $message);
    }

    /**
     * Add Perusahaan for current pemohon user
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function addPerusahaan()
    {
        $success = false;
        $message = '';
        $this->loadModel('Perusahaan');

        $perusahaan = $this->Perusahaan->newEntity();

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        if ($pemohonId) {
            $this->request->data['pemohon_id'] = $pemohonId;
        }

        if ($this->request->is('post')) {
            $perusahaan = $this->Perusahaan->patchEntity($perusahaan, $this->request->data);

            if ($this->Perusahaan->save($perusahaan)) {
                $success = true;
                $message = __('perusahaan berhasil disimpan.');
            } else {
                $message = __('perusahaan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($perusahaan, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Pemohon id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        // If id is not provided, get pemohon from current user
        if (!$id) {
            $id = $this->getPemohonIdFromQueryStringOrSession();

            if (!$id) {
                throw new NotFoundException('Anda mengakses form ini secara ilegal');
            }
        }

        $pemohon = $this->Pemohon->get($id, [
            'contain' => [
                'Pengguna' => [
                    'fields' => ['id', 'username']
                ]
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $this->request->data['tgl_lahir'] = DynamicFormService::parseDate($this->request->data['tgl_lahir']);

            if (isset($this->request->data['desa'])) {
                unset($this->request->data['desa']);
            }

            if (isset($this->request->data['kecamatan'])) {
                unset($this->request->data['kecamatan']);
            }

            if (isset($this->request->data['kabupaten'])) {
                unset($this->request->data['kabupaten']);
            }

            if (isset($this->request->data['provinsi'])) {
                unset($this->request->data['provinsi']);
            }

            // Get peran_id if it's new pengguna
            if (isset($this->request->data['pengguna'])) {
                if (!isset($this->request->data['pengguna']['id'])) {
                    // Get Peran 'pemohon'
                    $peranTable = TableRegistry::get('Peran');
                    $peran = $peranTable->find('all', [
                        'conditions' => [
                            'label_peran' => AuthService::PEMOHON_OBJECT
                        ]
                    ])->first();

                    if (!$peran) {
                        return $this->setResponseData($this->request->data, false, 'Peran "Pemohon" tidak ada');
                    }

                    $this->request->data['pengguna']['email'] = $this->request->getData('email');
                    $this->request->data['pengguna']['peran_id'] = $peran->id;
                    $this->request->data['pengguna']['related_object_name'] = AuthService::PEMOHON_OBJECT;
                }
            }

            $pemohon = $this->Pemohon->patchEntity($pemohon, $this->request->data, ['associated' => ['Pengguna']]);

            if ($this->Pemohon->save($pemohon)) {
                $success = true;
                $message = __('Pemohon berhasil disimpan.');
            } else {
                $this->setErrors($pemohon->errors());
                $message = __('Pemohon tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($pemohon, $success, $message);
    }

    /**
     * Edit Perusahaan for current user
     *
     * @param string|null $id Perusahaan id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function editPerusahaan($id = null)
    {
        $success = false;
        $message = '';
        $this->loadModel('Perusahaan');

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        $perusahaan = $this->Perusahaan->get(
            $id, [
                'contain' => [],
                'conditions' => [
                    'pemohon_id' => $pemohonId
                ]
            ]
        );

        if ($this->request->is(['patch', 'post', 'put'])) {
            $perusahaan = $this->Perusahaan->patchEntity($perusahaan, $this->request->data);
            if ($this->Perusahaan->save($perusahaan)) {
                $success = true;
                $message = __('perusahaan berhasil disimpan.');
            } else {
                $message = __('perusahaan tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($perusahaan, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Pemohon id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $this->Pemohon->setFindDataStatus(PemohonTable::DATA_STATUS_ALL);

        $pemohon = $this->Pemohon->get($id);
        $pemohon->data_status = PemohonTable::DATA_STATUS_INACTIVE;

        if ($this->Pemohon->save($pemohon)) {
            $success = true;
            $message = __('pemohon berhasil dihapus.');
        } else {
            $message = __('pemohon tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getGenderList()
    {
        $success = true;
        $message = '';

        $genderList = [];
        $genderList[] = array(
            'kode' => 'L',
            'label' => 'Laki-laki',
        );
        $genderList[] = array(
            'kode' => 'P',
            'label' => 'Perempuan',
        );

        $data = array(
            'items' => $genderList
        );

        $this->setResponseData($data, $success, $message);
    }

    public function getJenisIdentitasList()
    {
        $success = true;
        $message = '';

        $jenisIdentitasList = [];
        $jenisIdentitasList[] = array(
            'kode' => 'KTP',
            'label' => 'Kartu Tanda Penduduk',
        );
        $jenisIdentitasList[] = array(
            'kode' => 'SIM',
            'label' => 'Surat Izin Mengemudi',
        );
        $jenisIdentitasList[] = array(
            'kode' => 'Passport',
            'label' => 'Passport',
        );

        $data = array(
            'items' => $jenisIdentitasList
        );

        $this->setResponseData($data, $success, $message);
    }

    public function card($cardId = '')
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            $cardId = trim($cardId);
            $pemohon = $this->Pemohon->find('all', [
                'contain' => [
                    'PermohonanIzin' => [
                        'fields' => ['id', 'pemohon_id', 'no_permohonan', 'tgl_pengajuan'],
                        'sort' => ['tgl_pengajuan' => 'DESC']
                    ],
                    'PermohonanIzin.JenisIzin' => [
                        'fields' => [
                            'jenis_izin'
                        ]
                    ],
                    'PermohonanIzin.LatestProsesPermohonan' => [
                        'fields' => [
                            'id', 'tautan', 'jenis_proses_id', 'nama_proses'
                        ]
                    ],
                ],
                'fields' => ['id', 'nama', 'tipe_identitas', 'no_identitas', 'tempat_lahir', 'pekerjaan', 'no_tlp', 'no_hp', 'email'],
                'conditions' => ['card_id' => $cardId]
            ])->first();

            if (!$pemohon) {
                throw new \Exception('Pemohon tidak ditemukan');
            }

            FrozenDate::setJsonEncodeFormat($this->_defaultDateFormat);

            $data = [
                'id' => $pemohon->id,
                'nama' => $pemohon->nama,
                'tipe_identitas' => $pemohon->tipe_identitas,
                'no_identitas' => $pemohon->no_identitas,
                'tempat_lahir' => $pemohon->tempat_lahir,
                'pekerjaan' => $pemohon->pekerjaan,
                'no_tlp' => $pemohon->no_tlp,
                'no_hp' => $pemohon->no_hp,
                'email' => $pemohon->email,
            ];

            $permohonanIzin = [];
            foreach ($pemohon->permohonan_izin as $permohonan) {
                $permohonanIzin[] = [
                    'no_permohonan' => $permohonan->no_permohonan,
                    'tgl_pengajuan' => $permohonan->tgl_pengajuan,
                    'status_terakhir' => $permohonan->latest_proses_permohonan->nama_proses,
                    'jenis_izin' => $permohonan->jenis_izin->jenis_izin
                ];
            }
            $data['permohonan_izin'] = $permohonanIzin;
            $success = true;

        } catch (\Exception $e) {
            $message = $e->getMessage();
        }

        $this->setResponseData($data, $success, $message, false);
    }

    /**
     * Search method
     *
     * @return \Cake\Http\Response|null
     */
    public function search()
    {
        $success = true;
        $message = '';
        $conditions = [];


        // Optional Params from Mobile App
        if (isset($this->request->data['filter'])) {
            $filter = $this->request->data['filter'];
        }

        $conditions = [
            'OR' => [
                'nama ILIKE' => '%' . $filter . '%',
                'no_identitas ILIKE' => '%' . $filter . '%',
                'email ILIKE' => '%' . $filter . '%',
                'no_tlp ILIKE' => '%' . $filter . '%',
                'no_hp ILIKE' => '%' . $filter . '%',
            ],
            'AND' => [
                'card_id IS' => null,
            ],
        ];


        $data = $this->Pemohon->find("all", ["conditions" => $conditions]);

        $this->setResponseData($data, $success, $message);
    }

    public function link($id = null)
    {
        $success = false;
        $message = '';

        $pemohon = $this->Pemohon->get($id, [
            'contain' => []
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            if (isset($this->request->data["card_id"]) && $this->request->data["card_id"] == "") {
                $this->request->data["card_id"] = null;
            }

            $pemohon = $this->Pemohon->patchEntity($pemohon, $this->request->data);
            if ($this->Pemohon->save($pemohon)) {
                $success = true;
                $message = __('pemohon berhasil disimpan.');
            } else {
                $message = __('pemohon tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        
        $this->setResponseData($pemohon, $success, $message);
    }

    public function register()
    {
        $success = false;
        $message = '';
        $data = [];

        $validator = new \Cake\Validation\Validator();
        $validator
            ->requirePresence('tipe_identitas')
            ->notEmpty('tipe_identitas', 'Mohon isi tipe identitas')
            ->requirePresence('no_identitas')
            ->notEmpty('no_identitas', 'Mohon isi nomor identitas')
            ->requirePresence('nama')
            ->notEmpty('nama', 'Mohon isi nama lengkap')
            ->requirePresence('tempat_lahir')
            ->notEmpty('tempat_lahir', 'Mohon isi tempat lahir')
            ->requirePresence('tgl_lahir')
            ->notEmpty('tgl_lahir', 'Mohon isi tanggal lahir')
            ->requirePresence('no_tlp')
            ->notEmpty('no_tlp', 'Mohon isi no telp')
            ->requirePresence('alamat')
            ->notEmpty('alamat', 'Mohon isi alamat')
            ->requirePresence('provinsi_id')
            ->notEmpty('provinsi_id', 'Mohon isi provinsi')
            ->requirePresence('kabupaten_id')
            ->notEmpty('kabupaten_id', 'Mohon isi kabupaten/kota')
            ->requirePresence('kecamatan_id')
            ->notEmpty('kecamatan_id', 'Mohon isi kecamatan')
            ->requirePresence('desa_id')
            ->notEmpty('desa_id', 'Mohon isi desa/kelurahan')
            ->requirePresence('instansi_id')
            ->notEmpty('instansi_id', 'Mohon isi instansi yang dituju')
            ->setProvider('pengguna', 'App\Model\Table\PenggunaTable')
            // use the provider in a field validation rule
            ->requirePresence('email')
            ->notEmpty('email', 'Please fill the email')
            ->email('email')
            ->add('username', 'Pengguna', [
                'rule' => 'isPenggunaExists',
                'provider' => 'pengguna',
                'message' => 'sudah dipakai. Mohon ganti email lain'
            ]);

        $errors = $validator->errors($this->request->data());

        if (empty($errors)) {
            $pemohon = $this->Pemohon->newEntity();

            if ($this->request->is(['patch', 'post', 'put'])) {
                $this->request->data['tgl_lahir'] = DynamicFormService::parseDate($this->request->data['tgl_lahir']);
                $this->request->data['data_status'] = PemohonTable::DATA_STATUS_PENDING;
                $pemohon = $this->Pemohon->patchEntity($pemohon, $this->request->data);

                if ($this->Pemohon->save($pemohon)) {
                    $success = true;
                    $message = __('Registrasi telah diterima dan akan dievaluasi. Mohon kesediaan anda untuk menunggu');

                    // TODO Send registration email
                    NotificationService::sendMessage(
                        $pemohon->email,
                        'Registrasi Pemohon',
                        'Terima kasih telah melakukan pendaftaran. Anda akan mendapatkan notifikasi jika pendaftaran anda telah disetujui.'
                    );
                } else {
                    $this->setErrors($pemohon->errors());
                    $message = __('Registrasi tidak berhasil. Silahkan coba kembali.');
                }
            }
        } else {
            $this->setErrors($errors);
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Approve method
     *
     * @param string|null $id Pemohon id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function approve($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post']);
        $this->Pemohon->setFindDataStatus(PemohonTable::DATA_STATUS_ALL);

        $pemohon = $this->Pemohon->get($id);

        // Create verification code for pemohon
        $referer = $this->request->env('HTTP_REFERER');
        $token = AuthService::getRandomString(50);

        $pemohon->data_status = PemohonTable::DATA_STATUS_ACTIVE;
        $pemohon->kode_verifikasi = $token;

        if ($this->Pemohon->save($pemohon)) {
            $success = true;
            $message = __('Pemohon berhasil diapprove.');

            // Send email containing the verification link to Pemohon
            $verificationLink = $referer . '/#/verify/' . $token;
            $body = "Hi {$pemohon->nama}, klik link berikut ini untuk verifikasi pendaftaran anda {$verificationLink}";
            $sendEmail = NotificationService::sendMessage(
                $pemohon->email,
                'Verifikasi Pendaftaran Pemohon',
                $body
            );

            if (!$sendEmail) {
                $message = __('Email verifikasi tidak berhasil dikirimkan.');
            }
        } else {
            $message = __('Pemohon tidak berhasil diapprove. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    public function checkVerifyToken()
    {
        $success = false;
        $message = '';
        $data = [];

        $validator = new \Cake\Validation\Validator();
        $validator
            ->requirePresence('token')
            ->notEmpty('token', 'Invalid token');
        $errors = $validator->errors($this->request->data());

        if (empty($errors) && $this->request->is(['patch', 'post', 'put'])) {
            $data = $this->Pemohon->find('all', [
                'fields' => [
                    'id', 'nama'
                ],
                'conditions' => [
                    'kode_verifikasi' => $this->request->data['token'],
                    'tgl_verifikasi IS' => null
                ]
            ])->first();

            if (!$data) {
                $message = 'Token tidak valid';
            } else {
                $success = true;
            }
        }

        $this->setResponseData($data, $success, $message);
    }

    public function verify()
    {
        $success = false;
        $message = '';
        $data = [];

        $validator = new \Cake\Validation\Validator();
        $validator
            ->requirePresence('token')
            ->notEmpty('token', 'Invalid token');
        $errors = $validator->errors($this->request->data());

        if (empty($errors) && $this->request->is(['patch', 'post', 'put'])) {

            $pemohon = $this->Pemohon->find('all', [
                'fields' => [
                    'id', 'nama', 'email', 'username'
                ],
                'conditions' => [
                    'kode_verifikasi' => $this->request->data['token'],
                    'tgl_verifikasi IS' => null
                ]
            ])->firstOrFail();

            // Get Peran 'pemohon'
            $peranTable = TableRegistry::get('Peran');
            $peran = $peranTable->find('all', [
                'conditions' => [
                    'label_peran' => AuthService::PEMOHON_OBJECT
                ]
            ])->first();

            if (!$peran) {
                return $this->setResponseData($this->request->data, false, 'Peran "Pemohon" tidak ada');
            }

            $pemohon->tgl_verifikasi = Time::now();

            if ($this->Pemohon->save($pemohon)) {
                // Generate new user with random password
                $password = AuthService::getRandomString(10);
                $pengguna = $this->Pemohon->Pengguna->newEntity();
                $pengguna->email = $pemohon->email;
                $pengguna->username = $pemohon->username ?: $pemohon->email;
                $pengguna->password = $password;
                $pengguna->peran_id = $peran->id;
                $pengguna->related_object_name = AuthService::PEMOHON_OBJECT;
                $pengguna->related_object_id = $pemohon->id;

                if ($this->Pemohon->Pengguna->save($pengguna)) {
                    $success = true;
                    $message = 'Verifikasi berhasil. Mohon cek email untuk informasi login anda.';

                    // Send the username and password info to email
                    $body  = "Hi {$pemohon->nama}, berikut ini adalah informasi user anda: ";
                    $body .= "<p>username : {$pengguna->username}</p>";
                    $body .= "<p>password : {$password}</p>";

                    $sendEmail = NotificationService::sendMessage(
                        $pemohon->email,
                        'Verifikasi Pendaftaran Pemohon',
                        $body
                    );

                    if (!$sendEmail) {
                        $message = __('Email user baru tidak berhasil dikirimkan.');
                    }
                } else {
                    $message = 'Tidak dapat membuat akun baru';
                }

            } else {
                $this->setErrors($pemohon->errors());
                $message = __('Verifikasi tidak berhasil.');
            }
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $pegawai = $this->Pegawai->find('all', [
            'fields' => ['id', 'nama', 'instansi_id'],
            'conditions' => [
                'OR' => [
                    'Pegawai.nama ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pegawai.nomor_induk ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pegawai.posisi ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pegawai.no_hp ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pegawai.email ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);

        $data = array(
            'items' => $pegawai
        );

        $this->setResponseData($data, $success, $message);
    }
}
