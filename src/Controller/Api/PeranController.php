<?php
namespace App\Controller\Api;

use App\Controller\Api\ApiController;
use App\Model\Entity\Peran;
use Cake\Collection\Collection;
/**
 * Peran Controller
 *
 * @property \App\Model\Table\PeranTable $Peran
 */
class PeranController extends ApiController
{
    public function initialize()
    {
        parent::initialize();
    }

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $userData = $this->getCurrentUser();

        // Only for Administrator, this filter is not applied
        if ($userData->peran_id != 1) {
            $this->Peran->setInstansi($this->getCurrentInstansi());
        }
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $this->paginate = [
            'contain' => ['Instansi'],
            'conditions' => [
               'LOWER(Peran.label_peran) LIKE' => '%' . $this->_apiQueryString . '%',
            ],
            'order' => [
                'Peran.label_peran' => 'ASC'
            ]
        ];

        $peran = $this->paginate($this->Peran);
        $paging = $this->request->params['paging']['Peran'];
        $peran = $this->addRowNumber($peran);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $peran,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $peran = $this->Peran->find('all', [
            'fields' => ['Peran.id', 'Peran.label_peran'],
            'conditions' => [
                'OR' => [
                    'LOWER(Peran.label_peran) LIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);
        $data = array(
            'items' => $peran
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Peran id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $peran = $this->Peran->get($id, [
            'contain' => ['Instansi', 'Pengguna']
        ]);

        $this->Peran->setUser($this->getCurrentUser());
        $allMenu = $this->Peran->getExistingMenu($id);

        $peran['all_menu'] = $allMenu;

        $this->setResponseData($peran, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $peran = $this->Peran->newEntity();
        if ($this->request->is('post')) {
            $peran = $this->Peran->patchEntity($peran, $this->request->data);

            if ($this->Peran->save($peran)) {
                $requestMenuIds = $this->request->data['menu_ids'];
                if (!empty($requestMenuIds)) { // If the request send Menu IDs to be linked
                    // Add link to the menu
                    $menu = $this->Peran->Menu->find()->where(['id IN' => $requestMenuIds])->toArray();
                    $this->Peran->Menu->link($peran, $menu);
                }

                $success = true;
                $message = __('peran berhasil disimpan.');
            } else {
                $this->setErrors($peran->errors());
                $message = __('peran tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($peran, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Peran id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';
        $presentMenuIds = array();

        $peran = $this->Peran->get($id, [
            'contain' => ['Menu']
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $peran = $this->Peran->patchEntity($peran, $this->request->data);
            $requestMenuIds = $this->request->data['menu_ids'];

            // If there's any linked menu before
            if (!empty($peran->menu)) {
                // Get all linked Menu Ids
                $presentMenuIds = (new Collection($peran->menu))->extract('id')->filter()->toArray();

                // If the request send Menu IDs to be linked
                if (!empty($requestMenuIds)) {
                    // Unlink existing menu that's not included in request data
                    $requestMenuIds = $this->request->data['menu_ids'];
                    $deletedMenu = $this->Peran->Menu
                        ->find()
                        ->where([
                            'id IN' => $presentMenuIds,
                            'id NOT IN' => $requestMenuIds
                        ])
                        ->toArray();
                    $this->Peran->Menu->unlink($peran, $deletedMenu);

                    // Get all linked Menu Ids
                    $presentMenuIds = (new Collection($peran->menu))->extract('id')->filter()->toArray();

                    // Splice the new menu ids to be linked
                    $newIds = array_diff($requestMenuIds, $presentMenuIds);

                    // Add link to new only menu ids
                    if (!empty($newIds)) {
                        $menu = $this->Peran->Menu->find()->where(['id IN' => $newIds])->toArray();
                        $this->Peran->Menu->link($peran, $menu);
                    }

                } else { // If no Menu IDs is inluded in request data, unlink all related Menu
                    $deletedMenu = $this->Peran->Menu
                        ->find()
                        ->where([
                            'id IN' => $presentMenuIds
                        ])
                        ->toArray();
                    $this->Peran->Menu->unlink($peran, $deletedMenu);
                }
            } else { // If there's no linked menu before
                if (!empty($requestMenuIds)) { // If the request send Menu IDs to be linked
                    // Add link to the menu
                    $menu = $this->Peran->Menu->find()->where(['id IN' => $requestMenuIds])->toArray();
                    $this->Peran->Menu->link($peran, $menu);
                }
            }

            if ($this->Peran->save($peran)) {
                $success = true;
                $message = __('peran berhasil disimpan.');
            } else {
                $this->setErrors($peran->errors());
                $message = __('peran tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($peran, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Peran id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $peran = $this->Peran->get($id);
        if ($this->Peran->delete($peran)) {
            $success = true;
            $message = __('peran berhasil dihapus.');
        } else {
            $message = __('peran tidak berhasil dihapus. Silahkan coba kembali.');
        }
        $this->setResponseData($data, $success, $message);
    }

    public function getAllMenu()
    {
        $success = true;
        $message = '';

        $this->Peran->setUser($this->getCurrentUser());
        $allMenu = $this->Peran->getAccessibleMenu();
        $result = $this->Peran->parseSelectedMenu($allMenu);

        $this->setResponseData($result, $success, $message);
    }
}
