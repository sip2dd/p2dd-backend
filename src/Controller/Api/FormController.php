<?php
namespace App\Controller\Api;

use Cake\I18n\FrozenDate;
use Cake\ORM\TableRegistry;
use Cake\Datasource\ConnectionManager;
use Cake\Filesystem\Folder;
use Cake\Http\Client;

use App\Model\Entity\Custom;
use App\Service\DynamicFormService;
use App\Service\UploadService;
use App\Service\QueueService;

/**
 * Form Controller
 *
 * @property \App\Model\Table\FormTable $Form
 */
class FormController extends ApiController
{
    protected $_tipeForm = 'form';
    protected $_tipeTabel = 'tabel';
    protected $_tipeTab = 'tab';

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Mapper');
        $this->Auth->allow(['downloadFile']); // TODO Remove this
    }

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Form->setInstansi($this->getCurrentInstansi());

        switch ($this->request->action) {
            case 'downloadData': // serve as pdf or excel content
                $this->request->params['_ext'] = null;
                break;
        }
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';
        $this->paginate = [
            'contain' => [
                'Unit' => [
                    'fields' => [
                        'Unit.nama'
                    ]
                ],
                'Instansi' => [
                    'fields' => [
                        'Instansi.nama'
                    ]
                ]
            ],
            'conditions' => [
                'OR' => [
                    'Form.nama_form ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Unit.nama ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Instansi.nama ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'order' => [
                'Form.id' => 'DESC',
                'Form.nama_form' => 'ASC',
                'Unit.nama' => 'ASC'
            ]
        ];

        $form = $this->paginate($this->Form);
        $paging = $this->request->params['paging']['Form'];
        $form = $this->addRowNumber($form);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $form,
            'total_items' => $paging['count']
        );
        
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Form id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';
        $form = DynamicFormService::getFormattedForm($id);
        $this->setResponseData($form, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Form id.
     * @param int|null $keyId Key ID to retrieve data
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function getForm($formId, $keyId = null)
    {
        $success = false;
        $message = '';
        $form = null;

        try {
            $queryStrings = [
                'key_id' => $keyId
            ];
            $formType = isset($this->request->query['form_type']) ? $this->request->query["form_type"] : null;
            $withRecord = isset($this->request->query['with_record']) ? $this->request->query['with_record'] : null;
            
            foreach ($this->request->query as $key => $val) {
                if ($key != '_url' && $key != 'form_type' && $key != 'with_record') {
                    $queryStrings[$key] = $val;
                }
            }

            $user = $this->getCurrentUser();
            $instansi = $this->getCurrentInstansi();
            $unit = $this->getCurrentUnit();

            if (strpos($formType, ',') !== FALSE) {
                $formType = explode(',', $formType);
            }

            DynamicFormService::setUser($user);
            DynamicFormService::setInstansi($instansi);
            DynamicFormService::setUnit($unit);
            DynamicFormService::setFormTypeFilter($formType);
            DynamicFormService::setWithRecord($withRecord);
            DynamicFormService::setQueryStrings($queryStrings, false);

            if ($keyId == 'undefined') {
                $keyId = null;
            }

            FrozenDate::setJsonEncodeFormat($this->_defaultDateFormat);
            $form = DynamicFormService::getFormattedFormWithRecord($formId, $keyId, $user->id);
            $success = true;

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($form, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $form = $this->Form->newEntity();
        if ($this->request->is('post') && !empty($this->request->data)) {
            $data = DynamicFormService::prepareSaveFormSetup($this->request->data);
            $form = $this->Form->patchEntity($form, $data, ['associated' => ['Canvas', 'Canvas.CanvasElement', 'Canvas.CanvasTab', 'Canvas.CanvasElement.ElementOption']]);
            if ($this->Form->save($form)) {
                $success = true;
                $message = __('Form berhasil disimpan.');
            } else {
                $this->setErrors($form->errors());
                $message = __('Form tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($form, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Form id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $form = $this->Form->get($id, [
            'contain' => []
        ]);

        if ($this->request->is(['patch', 'post', 'put']) && !empty($this->request->data)) {
            $data = DynamicFormService::prepareSaveFormSetup($this->request->data);
            $form = $this->Form->patchEntity($form, $data, ['associated' => ['Canvas', 'Canvas.CanvasElement', 'Canvas.CanvasTab', 'Canvas.CanvasElement.ElementOption']]);

            if ($this->Form->save($form)) {
                $success = true;
                $message = __('Form berhasil disimpan.');
            } else {
                $this->setErrors($form->errors());
                $message = __('Form tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($data, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Form id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $form = $this->Form->get($id);
        if ($this->Form->delete($form)) {
            $success = true;
            $message = __('Form berhasil dihapus.');
        } else {
            $message = __('Form tidak berhasil dihapus. Silahkan coba kembali.');
        }
        $this->setResponseData($data, $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $form = $this->Form->find('all', [
            'fields' => ['Form.id', 'Form.nama_form'],
            'conditions' => [
                'OR' => [
                    'Form.nama_form ILIKE' => '%' . $this->_apiQueryString . '%',
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);
        $data = array(
            'items' => $form
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Method to Save Form Data
     * @param $formId
     * @param $keyId
     */
    public function saveForm($formId, $keyId = null)
    {
        $success = false;
        $message = '';
        $responseData = null;
        $newKeyIds = []; // Hold list of new keys with value

        try {
            $form = $this->Form->get($formId, [
                'fields' => ['id', 'nama_form', 'key_field']
            ]);

            if ($form) {
                if ($this->request->is('post') && !empty($this->request->data)) {
                    $errors = [];

                    $connection = ConnectionManager::get('default');
                    $instansi = $this->getCurrentInstansi();
                    $unit = $this->getCurrentUnit();

                    DynamicFormService::setInstansi($instansi);
                    DynamicFormService::setUnit($unit);
                    
                    $parseData = DynamicFormService::prepareSaveFormData($this->request->data, $form->key_field, $keyId, $formId);
                    $saveData = $parseData['saveData'];
                    $saveAction = $parseData['saveAction'];

                    /**** BEGIN - Save to Internal ****/
                    if (!empty($saveData)) {
                        $i = 0;

                        foreach ($saveData as $tableData) {
                            $tableName = $tableData['nama_datatabel'];
                            $datatabelId = $tableData['datatabel_id'];
                            $useMapper = $tableData['use_mapper'];

                            $datatabelTable = TableRegistry::get($tableName, [
//                                'className' => 'App\Model\Table\CustomTable',
                                'table' => $tableName
                            ]);
                            
                            // Inject User and Instansi Session
                            if (method_exists($datatabelTable, 'setUser')) {
                                $datatabelTable->setUser($this->getCurrentUser());
                            }
                            if (method_exists($datatabelTable, 'setInstansi')) {
                                $datatabelTable->setInstansi($this->getCurrentInstansi());
                            }
                            
                            if (isset($tableData['records']) && !empty($tableData['records'])) {
                                foreach ($tableData['records'] as $record) {
                                    
                                    if (!empty($record) && !is_null($record)) {
                                        $recordId = null;

                                        // Set instansi_id from current session
                                        $instansi = $this->getCurrentInstansi();
                                        if ($instansi && !isset($record['instansi_id'])) {
                                            $record['instansi_id'] = $instansi->id;
                                        }
                                        
                                        /**
                                         * If form's key_field contains the $tableName, then it's the header table
                                         */
                                        if (
                                            strpos($form->key_field, $tableName) !== false &&
                                            strpos($form->key_field, $tableName) === 0
                                        ) {
                                            if (!is_null($keyId)) { // If keyId is provided
                                                $record['id'] = $keyId;
                                            }
                                        } else { // Otherwise, it's the detail table
                                            // If not provided, check if the keyId has been set on new record in header table
                                            if (array_key_exists($form->key_field, $newKeyIds)) {
                                                $record[$form->key_field] = $newKeyIds[$form->key_field];
                                            }
                                        }

                                        // Update Mode on header or detail table
                                        if (!empty($record['id'])) {
                                            $recordId = $record['id'];
                                            $record = $this->_addModifiedInfo($record);
                                            $entity = $datatabelTable->get($recordId);
                                            $entity = $datatabelTable->patchEntity($entity, $record);

//                                            if ($connection->update($tableName, $record, ['id' => $record['id']])) {
                                            if ($datatabelTable->save($entity)) {
                                                // Add Mapper record if datatabel using use mapper
                                                if ($useMapper == 1) {
                                                    $this->Mapper->createMapper($datatabelId, $recordId, $keyId);
                                                }
                                            } else {
                                                $errors[$i]['nama_datatabel'] = $tableName;
                                                $errors[$i]['record'] = $record;
                                                $errors[$i]['message'] = $entity->getErrors();
                                            }

                                        } else { // Create Mode on header or detail table
                                            $record = $this->_addCreatedInfo($record);

//                                            $entity = new Custom();
                                            $entity = $datatabelTable->newEntity();
                                            $entity = $datatabelTable->patchEntity($entity, $record);

//                                            if ($newRecord = $connection->insert($tableName, $record, ['tgl_dibuat' => 'datetime'])) {
//                                                $recordId = $newRecord->lastInsertId($tableName.'_id_seq');

                                            if ($datatabelTable->save($entity)) {

                                                $recordId = $entity->id;

                                                // Keep the newly created keys to be used by the child
                                                $newKeyIds[$tableName . '_id'] = $recordId;

                                                // Add Mapper record if datatabel using use mapper
                                                if ($useMapper == 1) {
                                                    $this->Mapper->createMapper($datatabelId, $recordId, $keyId);
                                                }
                                            } else {
                                                $errors[$i]['nama_datatabel'] = $tableName;
                                                $errors[$i]['record'] = $record;
                                                $errors[$i]['message'] = $entity->getErrors();
                                            }
                                        }
                                        $i++;
                                    } else {
                                        $errors[$i]['nama_datatabel'] = $tableName;
                                        $errors[$i]['record'] = [];
                                        $errors[$i]['message'] = 'Data kosong';
                                    }
                                }
                            }
                        }
                    }
                    /**** END - Save to Internal ****/

                    /**** BEGIN - Save to External ****/
                    if (
                        $saveAction &&
                        $saveAction->target_simpan == DynamicFormService::TIPE_SAVE_EKSTERNAL &&
                        $saveAction->service_eksternal
                    ) {
                        $extBaseUrl = $saveAction->service_eksternal->base_url;
                        $extTargetPath = $saveAction->target_path;
                        $options = [
                            'type' => 'json'
                        ];
                        
                        // Prepare request to external web service
                        if (strpos($extBaseUrl, "http") === false) {
                            throw new \Exception('Invalid External Service URL');
                        }

                        // Add '/' if target uri doesn't start with '/'
                        if (substr($extTargetPath, 0, 1) != '/') {
                            $extTargetPath = '/' . $extTargetPath;
                        }

                        $serviceEksternalTable = TableRegistry::get('ServiceEksternal');
                        
                        // Determine Auth
                        switch ($saveAction->service_eksternal->tipe_otentikasi) {
                            case $serviceEksternalTable::BASIC_AUTHENTICATION:
                                $options['auth'] = [
                                    'username' => $saveAction->service_eksternal->username,
                                    'password' => $saveAction->service_eksternal->password
                                ];
                                break;
                            default:
                                break;
                        }

                        // Send data to queue
                        /*QueueService::setInstansi($instansi);
                        QueueService::createJob('SaveExternal', [
                            'target_url' =>  $extBaseUrl . $extTargetPath,
                            'request_body' => $saveData,
                            'options' => $options
                        ]);*/

                        // BEGIN - Do sync request to External Web Service
                        $http = new Client();
                        $response = $http->post($extBaseUrl . $extTargetPath, json_encode($saveData), $options);

                        // If Response is not OK or Accepted
                        if (!$response->isOk()) {
                            throw new \Exception($response->getStatusCode() . ' - ' . $response->getReasonPhrase());
                        }

                        // Read the response
                        $responseJson = $response->json;

                        if (isset($responseJson['data'])) {
                            $responseData = $responseJson['data'];
                        }
                        if (isset($responseJson['success'])) {
                            $success = $responseJson['success'];
                        }
                        if (isset($responseJson['message'])) {
                            $message = $responseJson['message'];
                        }
                        // END - Do sync request to External Web Service
                    }
                    /**** END - Save to External ****/

                    if (empty($errors)) {
                        $success = true;
                        $message = __('Form berhasil disimpan.');
                    } else {
                        $this->setErrors($errors);
                        $message = __('Form tidak berhasil disimpan. Silahkan coba kembali.');
                    }
                }
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->log($message);
        }

        $this->setResponseData([], $success, $message);
    }

    public function deleteData($formId, $datatabelId, $keyId) {
        $success = false;
        $message = '';

        $this->request->allowMethod(['post', 'delete']);

        try {
            $canvasTable = TableRegistry::get('Canvas');
            $canvas = $canvasTable->find('all', [
                'contain' => [
                    'Datatabel' => [
                        'fields' => ['id', 'nama_datatabel', 'is_custom']
                    ],
                    'Form' => [
                        'fields' => ['id', 'key_field']
                    ]
                ],
                'conditions' => [
                    'form_id' => $formId,
                    'datatabel_id' => $datatabelId,
                ]
            ])->first();

            if (!$canvas) {
                $message = 'Anda tidak mempunyai akses ke form tersebut';
            } else {
                // Get Table
                $tableName = $canvas->datatabel->nama_datatabel;
                $datatabelTable = TableRegistry::get($tableName, [
                    'table' => $tableName
                ]);

                if (!$datatabelTable) {
                    $message = 'Datatabel tidak ditemukan';
                } else {
                    $fieldToSelect = [];
                    $conditions = [];

                    $tableName = $canvas->datatabel->nama_datatabel;
                    $isCustom = $canvas->datatabel->is_custom;
                    $useMapper = $canvas->datatabel->use_mapper;

                    if ($isCustom) { // For custom tables
                        $fieldToSelect = ["$tableName.id", "$tableName.del"];
                        $conditions["$tableName.del"] = 0;
                    } else {
                        $fieldToSelect = ["$tableName.id"];
                    }

                    $query = $datatabelTable->find('all')->select($fieldToSelect)->from($tableName);

                    // If it's using mapper, join with the mapper
                    if ($useMapper) {
                        $query->innerJoin('mapper', [
                            "mapper.datatabel_record_id = $tableName.id",
                            "mapper.nama_datatabel" => $tableName
                        ]);
                        $conditions["mapper.key_id"] = $keyId;
                    } else {
                        if ($tableName . "_id" == $canvas->form->key_field) {
                            $conditions["$tableName.id"] = $keyId;
                        } else {
                            $conditions["$tableName.{$canvas->form->key_field}"] = $keyId;
                        }
                    }

                    $query->where($conditions);

                    $record = $query->first();
                    if (!$record) {
                        $message = 'Record tidak ditemukan';
                    } else {
                        $deleteSuccess = false;
                        if ($isCustom) {
                            $record->del = 1;
                            if ($datatabelTable->save($record)) {
                                $deleteSuccess = true;
                            }
                        } else {
                            if ($datatabelTable->delete($record)) {
                                $deleteSuccess = true;
                            }
                        }

                        if (!$deleteSuccess) {
                            $message = 'Record tidak berhasil dihapus';
                        } else {
                            if ($useMapper) { // if its using mapper, delete the mapper
                                $mapperTable = TableRegistry::get('mapper');
                                $mapperConditions = [
                                    "mapper.datatabel_record_id" => $keyId,
                                    "mapper.nama_datatabel" => $tableName,
                                    "mapper.key_id" => $keyId
                                ];
                                $mapperTable->deleteAll($mapperConditions);
                            }

                            $success = true;
                            $message = 'Record berhasil dihapus';
                        }
                    }
                }
            }

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->log($message);
        }

        $this->setResponseData([], $success, $message);
    }

    public function copy($id) {
        $success = false;
        $message = '';

        $form = $this->Form->get($id, [
            'contain' => [
                'Canvas' => [
                    'conditions' => ['del' => 0]
                ],
                'Canvas.CanvasTab',
                'Canvas.CanvasElement' => [
                    'conditions' => ['del' => 0]
                ],
                'Canvas.CanvasElement.ElementOption'
            ]
        ])->toArray();

        if ($this->request->is(['patch', 'post', 'put']) && !empty($form)) {
            DynamicFormService::setInstansi($this->getCurrentInstansi());
            $data = DynamicFormService::prepareCopyFormSetup($form);

            $newForm = $this->Form->newEntity();
            $newForm = $this->Form->patchEntity($newForm, $data, ['associated' => ['Canvas', 'Canvas.CanvasElement', 'Canvas.CanvasTab', 'Canvas.CanvasElement.ElementOption']]);

            if ($this->Form->save($newForm)) {
                $success = true;
                $message = __('Form berhasil diduplikasi.');
            } else {
                $this->setErrors($newForm->errors());
                $message = __('Form tidak berhasil diduplikasi. Silahkan coba kembali.');
            }
        }

        $this->setResponseData([], $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Form id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function deleteCanvas($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);

        $canvasTable = TableRegistry::get('Canvas');
        $canvas = $canvasTable->find('all')->where(['id' => $id]);

        if ($canvas) {
            $canvas = $canvas->first();
            $canvas->del = 1; // Soft delete canvas

            if ($canvasTable->save($canvas)) {
                $success = true;
                $message = __('Canvas berhasil dihapus.');
            } else {
                $message = __('Canvas tidak berhasil dihapus. Silahkan coba kembali.');
            }
        } else {
            $message = __('Canvas tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Delete canvas tab method
     *
     * @param string|null $id Form id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function deleteCanvasTab($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);

        $canvasTabTable = TableRegistry::get('CanvasTab');
        $canvasTab = $canvasTabTable->find('all')->where(['id' => $id])->firstOrFail();

        if ($canvasTabTable->delete($canvasTab)) {
            $success = true;
            $message = __('Tab berhasil dihapus.');
        } else {
            $message = __('Tab tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Endpoint for API to get Canvas Grid Data
     * @param $canvasId
     */
    public function getCanvasGridData($canvasId)
    {
        $success = true;
        $queryStrings = [];

        $page = !empty($this->request->query['page']) ? (int) $this->request->query['page'] : null;
        $limit = !empty($this->request->query['limit']) ? (int) $this->request->query['limit'] : null;

        $user     = $this->getCurrentUser();
        $instansi = $this->getCurrentInstansi();
        $unit     = $this->getCurrentUnit();

        foreach ($this->request->query as $key => $val) {
            if ($key != '_url' && $key != 'form_type' && $key != 'with_record' && $key != 'page' && $key != 'limit') {
                $queryStrings[$key] = $val;
            }
        }

        DynamicFormService::setUser($user);
        DynamicFormService::setInstansi($instansi);
        DynamicFormService::setUnit($unit);
        DynamicFormService::setQueryStrings($queryStrings);
        $data = DynamicFormService::getPaginatedData($canvasId, $this->_apiQueryString, $page, $limit);
        $message = DynamicFormService::getExceptionMessage();

        if ($message !== '') {
            $success = false;
        }

        // if (isset($data['items'])) {
            // $data['items'] = $this->addRowNumber($data['items']);
        // }

        FrozenDate::setJsonEncodeFormat($this->_defaultDateFormat);
        $this->setResponseData($data, $success, $message);
    }

    public function getButtonActionList()
    {
        $buttonActionList = [];
        $success = true;
        $message = '';

        $formTable = $this->Form;
        $formType = $this->request->query['type'];

        switch ($formType) {
            case $formTable::TIPE_FORM:
                $buttonActionList[] = array(
                    'kode' => 'add',
                    'label' => 'Add',
                );
                $buttonActionList[] = array(
                    'kode' => 'cancel',
                    'label' => 'Cancel',
                );
                $buttonActionList[] = array(
                    'kode' => 'save',
                    'label' => 'Save',
                );
                break;
            case $formTable::TIPE_TABEL_GRID:
            case $formTable::TIPE_TABEL:
                $buttonActionList[] = array(
                    'kode' => 'edit',
                    'label' => 'Edit',
                );
                $buttonActionList[] = array(
                    'kode' => 'view',
                    'label' => 'View',
                );
                $buttonActionList[] = array(
                    'kode' => 'report',
                    'label' => 'Report',
                );
                $buttonActionList[] = array(
                    'kode' => 'delete',
                    'label' => 'Delete',
                );
                break;
        }

        $data = array(
            'items' => $buttonActionList
        );

        $this->setResponseData($data, $success, $message);
    }
    
    /**
     * Upload file
     */
    public function uploadFile()
    {
        $data = [];
        $success = false;
        $message = '';

        try {
            //UploadService::setUser($this->getCurrentUser());
            UploadService::setInstansiID($this->getInstansiIdFromDataOrSession());
            $uploadData = UploadService::upload('file', 'upload');
            $data['file_name'] = $uploadData['file_name'];
            $data['file_url'] = $uploadData['url'];
            
            $success = true;
            $message = 'File berhasil diupload';
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Download Data as PDF or XLS
     *
     * @param string|null $id Form id.
     * @param int|null $keyId Key ID to retrieve data
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function downloadData($formId, $keyId = null)
    {
        //TODO Protect this method from public (using some kind of token)
        $success = false;
        $message = '';
        $form = null;

        try {
            set_time_limit(0);

            $queryStrings = [
                'key_id' => $keyId
            ];
            $outputType = isset($this->request->query['output_type']) ? $this->request->query["output_type"] : null;

            foreach ($this->request->query as $key => $val) {
                if (!in_array($key, ['url', 'output_type', 'page', 'limit'])) {
                    $queryStrings[$key] = $val;
                }
            }

            $user = $this->getCurrentUser();
            $userId = $user ? $user->id : null;
            $instansi = $this->getCurrentInstansi();
            $unit = $this->getCurrentUnit();

            DynamicFormService::setInstansi($instansi);
            DynamicFormService::setUser($user);
            DynamicFormService::setUnit($unit);
            DynamicFormService::setWithRecord('T');
            DynamicFormService::setIsReport('T');
            DynamicFormService::setQueryStrings($queryStrings);
            
            DynamicFormService::setFormTypeFilter(
                [
                    DynamicFormService::TIPE_TABEL, 
                    DynamicFormService::TIPE_TABEL_GRID, 
                    DynamicFormService::TIPE_TABEL_STATIK, 
                    DynamicFormService::TIPE_FORM
                ]
            );

            if ($keyId == 'undefined') {
                $keyId = null;
            }

            FrozenDate::setJsonEncodeFormat($this->_defaultDateFormat);
            $form = DynamicFormService::getFormattedFormWithRecord($formId, $keyId, $userId);
            $success = true;

            switch ($outputType) {
                case 'xls':
                case 'pdf': // use mpdf rendered in phpexcel
                    $objPHPExcel = new \PHPExcel();
                    $this->set(compact('objPHPExcel'));
                    break;
                default:
                    break;
            }

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->viewBuilder()->autoLayout(false);
        $this->response = $this->response->withHeader('Access-Control-Expose-Headers', 'Content-Disposition, Content-Type');
        $this->set(compact('form', 'success', 'message', 'outputType'));
    }

    public function downloadFile($filename = null)
    {
        return $this->_downloadFile($filename);
    }
}
