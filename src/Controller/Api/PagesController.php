<?php
namespace App\Controller\Api;

use Cake\Http\Client;

use App\Controller\Api\ApiController;
use App\Model\Entity\Page;
use App\Util\External;

/**
 * Pages Controller
 *
 * @property \App\Model\Table\Page $Page
 */
class PagesController extends ApiController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Page');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';
        $this->paginate = [
            'fields' => ['id', 'title'],
            'contain' => [
                'Instansi' => [
                    'fields' => [
                        'nama'
                    ]
                ]   
            ],
            'conditions' => [
                'OR' => [
                    'title ILIKE' => '%' . $this->_apiQueryString . '%'
                ],
            ],
            'order' => [
                'id' => 'DESC'
            ],
        ];

        $pages = $this->paginate($this->Page);
        $paging = $this->request->params['paging']['Page'];
        $pages = $this->addRowNumber($pages);

        $data = [
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $pages,
            'total_items' => $paging['count']
        ];
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Page id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $page = $this->Page->get($id, [
            'contain' => [
                'Instansi',
                'PageContent' => [
                    'fields' => [
                        'id', 'del', 'posisi', 'webservice', 'type_chart',
                        'tab_idx', 'page_id', 'height', 'width', 'title'
                    ],
                    'conditions' => ['del' => 0],
                    'sort' => ['posisi' => 'ASC']
                ],
                'PageTab' => [
                    'fields' => [
                        'id', 'del', 'tab_idx', 'page_id', 'label'
                    ],
                    'conditions' => ['del' => 0],
                    'sort' => ['tab_idx' => 'ASC']
                ]
            ]
        ]);

        $this->setResponseData($page, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';
        $page = $this->Page->newEntity();

        if ($this->request->is('post')) {
            $page = $this->Page->patchEntity($page, $this->request->data);
            if ($this->Page->save($page)) {
                $success = true;
                $message = __('Page berhasil disimpan.');
            } else {
                $this->setErrors($page->errors());
                $message = __('Page tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($page, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Page id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $page = $this->Page->get($id, [
            'contain' => [
                'PageContent',
                'PageTab'
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $page = $this->Page->patchEntity($page, $this->request->data, [
                'associated' => ['PageContent', 'PageTab']
            ]);

            if ($this->Page->save($page)) {
                $success = true;
                $message = __('Page berhasil disimpan.');
            } else {
                $this->setErrors($page->errors());
                $message = __('Page tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($page, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Page id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $page = $this->Page->get($id);

        if ($this->Page->delete($page)) {
            $success = true;
            $message = __('Page berhasil dihapus.');
        } else {
            $message = __('Page tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getChartData($id) {
        $success = true;
        $message = '';

        $pageContent = $this->Page->PageContent->get($id, [
            'fields' => [
                'id', 'webservice', 'type_chart'
            ],
            'conditions' => ['del' => 0],
        ]);

        // Do http request to webservice
        $webServiceUrl = External::build_source_url($pageContent->webservice);

        // Do request to web service
        $http = new Client();
        $response = $http->get(
            $webServiceUrl,
            ['chart_type' => $pageContent->type_chart],
            [
                'auth' => [
                    'username' => 'myusername', 'password' => 'mypassword'
                ]
            ]
        );//TODO change dummy username and password
        $responseJson = $response->json;

        if (isset($responseJson['data']) && !empty($responseJson['data'])) {
            $result = $responseJson['data'];
        }

        $this->setResponseData($result, $success, $message);
    }

    public function getChartTypes() {
        $success = true;
        $message = '';

        $jenisList = [];
        $jenisList[] = ['kode' => 'AreaChart', 'label' => 'Area'];
        $jenisList[] = ['kode' => 'BarChart', 'label' => 'Bar'];
        $jenisList[] = ['kode' => 'BubbleChart', 'label' => 'Bubble'];
        $jenisList[] = ['kode' => 'ColumnChart', 'label' => 'Column'];
        $jenisList[] = ['kode' => 'DonutChart', 'label' => 'Donut'];
        $jenisList[] = ['kode' => 'PieChart', 'label' => 'Pie'];
        $jenisList[] = ['kode' => 'ScatterChart', 'label' => 'Scatter'];
        $jenisList[] = ['kode' => 'Table', 'label' => 'Table'];

        $data = ['items' => $jenisList];
        $this->setResponseData($data, $success, $message);
    }
}