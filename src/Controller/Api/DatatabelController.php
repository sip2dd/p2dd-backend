<?php
namespace App\Controller\Api;

use App\Service\TableService;
use Aura\Intl\Exception;
use Cake\Core\Configure;
use Cake\Datasource\ConnectionManager;
use Phinx\Db\Adapter\AdapterFactory;
use Cake\ORM\TableRegistry;

/**
 * Datatabel Controller
 *
 * @property \App\Model\Table\DatatabelTable $Datatabel
 */
class DatatabelController extends ApiController
{

    private $_tablePrefix = 'c_';

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Datatabel->setInstansi($this->getCurrentInstansi());
        $this->DataKolom = $this->loadModel('DataKolom');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';
        
        $this->paginate = [
            'fields' => [
                'Datatabel.id', 'Datatabel.nama_datatabel', 'Datatabel.label',
                'Datatabel.visible', 'Datatabel.is_custom',
                'Datatabel.instansi_id'
            ],
            'contain' => [
                'Instansi' => [
                    'fields' => ['nama']
                ]
            ],
            'conditions' => [
                'OR' => [
                    'Datatabel.nama_datatabel ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Datatabel.label ILIKE' => '%' . $this->_apiQueryString . '%',
                ]
            ],
            'order' => [
                'Datatabel.id' => 'DESC',
                'Datatabel.nama_datatabel' => 'ASC'
            ]
        ];

        $datatabel = $this->paginate($this->Datatabel);
        $paging = $this->request->params['paging']['Datatabel'];
        $datatabel = $this->addRowNumber($datatabel);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $datatabel,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Datatabel id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = false;
        $message = '';
        $data = [];
        
        try {
            $data = $this->Datatabel->get($id, [
                'fields' => [
                    'Datatabel.id', 'Datatabel.nama_datatabel', 'Datatabel.label', 'Datatabel.visible',
                    'Datatabel.is_custom', 'Datatabel.use_mapper', 'Datatabel.is_view'
                ],
                'contain' => [
                    'DataKolom' => [
                        'fields' => [
                            'DataKolom.id',
                            'DataKolom.datatabel_id',
                            'DataKolom.data_kolom',
                            'DataKolom.label',
                            'DataKolom.tipe_kolom',
                            'DataKolom.panjang'
                        ]
                    ],
                    'UnitDatatabel' => [
                        'fields' => [
                            'id',
                            'unit_id',
                            'datatabel_id'
                        ]
                    ],
                    'UnitDatatabel.Unit' => [
                        'fields' => [
                            'id',
                            'nama'
                        ]
                    ]
                ]
            ]);

            // check if table already has record or not
            $data->is_editable = (TableService::hasRecord($data->nama_datatabel)) ? 0 : 1;
            $success = true;

        } catch (Cake\Datasource\Exception\RecordNotFoundException $ex) {
            $message = $ex->getMessage();

        } catch (\Exception $ex) {
            $message = $ex->getMessage();    
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getTipeKolomList()
    {
        $success = true;
        $message = '';

        $tipeKolomList = [];
        $tipeKolomList[] = array(
            'kode' => 'character varying',
            'label' => 'character varying',
        );
        $tipeKolomList[] = array(
            'kode' => 'date',
            'label' => 'date',
        );
        $tipeKolomList[] = array(
            'kode' => 'double precision',
            'label' => 'double precision',
        );
        $tipeKolomList[] = array(
            'kode' => 'bigint',
            'label' => 'bigint',
        );
		$tipeKolomList[] = array(
            'kode' => 'text',
            'label' => 'text',
        );

        $data = array(
            'items' => $tipeKolomList
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        try {
            $datatabel = $this->Datatabel->newEntity();

            if ($this->request->is('post')) {

                if ($this->request->data['is_custom'] == 1) {
                    $instansi = $this->Datatabel->getInstansi();
                    $namaDatatabel = $this->_tablePrefix . $this->request->data['nama_datatabel'];
                    if ($instansi) {
                        $namaDatatabel .= '_'. $instansi->id;
                    }

                    // Check if table name already exists
                    if ($this->Datatabel->tableNameExists($namaDatatabel)) {
                        throw new \Exception(__('Nama datatabel sudah dipakai. Mohon ganti nama lain'));
                    }
                    $this->request->data['nama_datatabel'] = $namaDatatabel;
                }

                $datatabel = $this->Datatabel->patchEntity($datatabel, $this->request->data, ['associated' => ['DataKolom', 'UnitDatatabel']]);

                if ($this->Datatabel->save($datatabel)) {
                    // Run Create Table if it's custom table
                    // if ($datatabel->is_custom == 1 && $datatabel->is_view == 0) {
                    // Perubahan 25 Desember 2021
                    if ($datatabel->is_view == 0) {
                        $this->Datatabel->createTable($datatabel->id);
                    }
                    $success = true;
                    $message = __('datatabel berhasil disimpan.');
                } else {
                    $this->setErrors($datatabel->getErrors());
                    $message = __('datatabel tidak berhasil disimpan. Silahkan coba kembali.');
                }
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->log($message);
        }

        $this->setResponseData($datatabel, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Datatabel id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        try {
            $datatabel = $this->Datatabel->get($id, [
                'fields' => [
                    'Datatabel.id', 'Datatabel.label', 'Datatabel.visible', 'Datatabel.use_mapper', 'Datatabel.instansi_id',
                    'Datatabel.is_custom', 'Datatabel.is_view'
                ],
                'contain' => [
                    'DataKolom' => [
                        'fields' => [
                            'DataKolom.id',
                            'DataKolom.datatabel_id',
                            'DataKolom.data_kolom',
                            'DataKolom.label',
                            'DataKolom.tipe_kolom',
                            'DataKolom.panjang',
                            'DataKolom.field_dibuat',
                        ]
                    ],
                    'UnitDatatabel' => [
                        'fields' => [
                            'id',
                            'unit_id',
                            'datatabel_id'
                        ]
                    ],
                    'UnitDatatabel.Unit' => [
                        'fields' => [
                            'id',
                            'nama'
                        ]
                    ]
                ]
            ]);

            if ($this->request->is(['patch', 'post', 'put'])) {
                $datatabel = $this->Datatabel->patchEntity($datatabel, $this->request->data, ['associated' => ['DataKolom', 'UnitDatatabel']]);

                if ($this->Datatabel->save($datatabel)) {
                    // Run Alter Table if it's custom table
                    if ($datatabel->is_custom == 1 && $datatabel->is_view == 0) {
                        $this->Datatabel->alterTable($datatabel->id);
                    }
                    $success = true;
                    $message = __('Datatabel berhasil disimpan.');
                } else {
                    $this->setErrors($datatabel->errors());
                    $message = __('Datatabel tidak berhasil disimpan. Silahkan coba kembali.');
                }
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->log($message);
        }

        $this->setResponseData($datatabel, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Datatabel id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $datatabel = array();

        $this->request->allowMethod(['post', 'delete']);
        $datatabel = $this->Datatabel->get($id);
        if ($this->Datatabel->delete($datatabel)) {
            $success = true;
            $message = __('datatabel berhasil dihapus.');
        } else {
            $message = __('datatabel tidak berhasil dihapus. Silahkan coba kembali.');
        }
        $this->setResponseData($datatabel, $success, $message);
    }

    public function deleteDataKolom($dataKolomId)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['delete']);
        $dataKolom = $this->Datatabel->DataKolom->get($dataKolomId,
            [
                'contain' => [
                    'Datatabel' => ['fields' => ['nama_datatabel', 'is_custom']]
                ]
            ]
        );

        try {
            $tableName = $dataKolom->datatabel->nama_datatabel;
            $columnName = $dataKolom->data_kolom;

            // If the custom table already has record, cannot drop the column
            if ($dataKolom->datatabel->is_custom == 1) {
                if (TableService::hasRecord($tableName)) {
                    throw new \Exception(__('Tidak dapat menghapus kolom yang sudah memiliki record'));
                }

                // Get the connection and try to drop the column
                $connection = ConnectionManager::get('default');
                $successDrop = $connection->transactional(function ($connection) use($tableName, $columnName) {
                    try {
                        $sqlQuery = "ALTER TABLE {$tableName} DROP COLUMN {$columnName}";
                        $connection->execute($sqlQuery);
                    } catch (\Exception $ex) {
                        return false;
                    }
                    return true;
                });

                if (!$successDrop) {
                    throw new \Exception(__('Tidak berhasil drop column. Silahkan coba kembali.'));
                }
            }

            if (!$this->Datatabel->DataKolom->delete($dataKolom)) {
                throw new \Exception(__('Data kolom tidak berhasil dihapus. Silahkan coba kembali.'));
            }

            $success = true;
            $message = __('Data kolom berhasil dihapus.');

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }
    
    public function getList()
    {
        $success = true;
        $message = '';

        $datatabel = $this->Datatabel->find('all', [
            'fields' => ['Datatabel.id', 'Datatabel.nama_datatabel', 'Datatabel.label'],
            /*'contain' => [
                'DataKolom' => [
                    'fields' => [
                        'DataKolom.id', 'DataKolom.datatabel_id', 'DataKolom.data_kolom', 'DataKolom.label',
                        'DataKolom.tipe_kolom'
                    ]
                ]
            ],*/
            'conditions' => [
                'OR' => [
                    'Datatabel.nama_datatabel ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Datatabel.label ILIKE' => '%' . $this->_apiQueryString . '%',
                ],
                'Datatabel.visible' => 1
            ],
            'limit' => $this->_autocompleteLimit
        ]);

        $data = array(
            'items' => $datatabel
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function getRecords($id)
    {
        $success = true;
        $message = '';
        $data = [];

        $instansi = $this->getCurrentInstansi();

        try {
            $datatabel = $this->Datatabel->get($id, [
                'fields' => [
                    'Datatabel.id', 'Datatabel.nama_datatabel', 'Datatabel.label', 'Datatabel.visible',
                    'Datatabel.is_custom', 'Datatabel.use_mapper'
                ],
                'contain' => [
                    'DataKolom' => [
                        'fields' => [
                            'DataKolom.id',
                            'DataKolom.datatabel_id',
                            'DataKolom.data_kolom',
                            'DataKolom.label',
                            'DataKolom.tipe_kolom',
                            'DataKolom.panjang'
                        ]
                    ],
                    'UnitDatatabel' => [
                        'fields' => [
                            'id',
                            'unit_id',
                            'datatabel_id'
                        ]
                    ],
                    'UnitDatatabel.Unit' => [
                        'fields' => [
                            'id',
                            'nama'
                        ]
                    ]
                ]
            ]);

            $fieldToSelect = [];
            $conditions = [];
            $tableName = $datatabel->nama_datatabel;
            $isCustom = $datatabel->is_custom;

            foreach ($datatabel->data_kolom as $field) {
                $fieldName = $field->data_kolom;
                $fullFieldName = $tableName. "." . $fieldName;
                $fieldToSelect[] = $fullFieldName; // Field name

                // if field name is the same with one of the query strings, create the filter
                if (strlen($this->_apiQueryString) > 0) {
                    // Create filter based on type of column
                    // TODO make sure whether tipe_kolom will contains native postgres column type or use conversion
                    switch ($field->tipe_kolom) {
                        case 'character varying':
                            $conditions["OR"]["{$fullFieldName} ILIKE"] = '%' . $this->_apiQueryString . '%';
                            break;
                        case 'bigint':
                            $conditions["OR"]["{$fullFieldName}"] = (int) $this->_apiQueryString;
                            break;
                        case 'double precision':
                            $conditions["OR"]["{$fullFieldName}"] = (double) $this->_apiQueryString;
                            break;
                        case 'date':
                            $conditions["OR"]["{$fullFieldName}"] = self::parseDate($this->_apiQueryString);
                            break;
                    }

                    $filteredFields[] = $fullFieldName;
                }
            }

            if ($this->Datatabel->hasInstansiField($tableName) && isset($instansi->id)) {
                $conditions['instansi_id'] = $instansi->id;
            }

            // Load the Custom Table
            $page = $this->_apiPage;
            $limit = $this->_apiLimit;
            $datatabelTable = TableRegistry::get($tableName, [
                'table' => $tableName
            ]);

            if ($datatabelTable) {
                //Select all records
                $query = $datatabelTable->find('all')->select($fieldToSelect)->from($tableName);

                if (!empty($conditions)) {
                    $query->where($conditions);
                }

                $count = $query->count();

                if ($count > 0) {
                    // calculate limit and offset for pagination
                    $totalPages = ceil($count / $limit);

                    if ($page > $totalPages) $page = $totalPages;
                    $start = $limit * $page - $limit; // do not put $limit*($page - 1)
                    $query->limit($limit)->offset($start);

                    $records = $query->all();
                    $records = $this->addRowNumber($records);

                    // return the data with pagination info
                    $data = [
                        'limit' => $limit,
                        'page' => $page,
                        'items' => $records,
                        'total_items' => $count
                    ];
                }
            }

        } catch (Cake\Datasource\Exception\RecordNotFoundException $ex) {
            $message = $ex->getMessage();
            $success = false;

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $success = false;
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getDataKolom()
    {

        $success = true;
        $message = '';
        $data = [];
        $id = $this->request->getQuery('datatabel_id') ? (int) $this->request->getQuery('datatabel_id') : null;
        $dataKolomId = $this->request->getQuery('datakolom_id');

        try {
            $conditions = [
                'OR' => [
                    'DataKolom.label ILIKE' => '%' . $this->_apiQueryString . '%',
                    'DataKolom.data_kolom ILIKE' => '%' . $this->_apiQueryString . '%'
                ],
                'DataKolom.datatabel_id' => $id
            ];

            if ($dataKolomId != 'null') {
                $conditions = [
                    'DataKolom.id' => $dataKolomId
                ];
            }

            $datatabel = $this->DataKolom->find('all', [
                'fields' => [
                    'DataKolom.id', 'DataKolom.label'
                ],
                'conditions' => $conditions,
                'limit' => $this->_autocompleteLimit
            ]);

            $data = [
                'items' => $datatabel
            ];
        } catch (Cake\Datasource\Exception\RecordNotFoundException $ex) {
            $message = $ex->getMessage();
            $success = false;
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $success = false;
        }

        $this->setResponseData($data, $success, $message);
    }
}
