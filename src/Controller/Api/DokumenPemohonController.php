<?php
namespace App\Controller\Api;

use Cake\Filesystem\Folder;
use Cake\ORM\TableRegistry;
use App\Service\DynamicFormService;
use App\Service\UploadService;

/**
 * DokumenPemohon Controller
 *
 * @property \App\Model\Table\DokumenPemohonTable $DokumenPemohon
 */
class DokumenPemohonController extends ApiController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Auth->allow(['downloadFile']); // TODO Remove this
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $conditions = [
            'OR' => [
                'DokumenPemohon.no_dokumen ILIKE' => '%' . $this->_apiQueryString . '%',
                'JenisDokumen.kode ILIKE' => '%' . $this->_apiQueryString . '%',
                'JenisDokumen.deskripsi ILIKE' => '%' . $this->_apiQueryString . '%'
            ]
        ];

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        if ($pemohonId) {
            $conditions['DokumenPemohon.pemohon_id'] = $pemohonId;
        }

        $this->paginate = [
            'contain' => [
                'JenisDokumen' => [
                    'fields' => [
                        'kode', 'deskripsi'
                    ]
                ]
            ],
            'conditions' => $conditions
        ];

        $dokumenPemohon = $this->paginate($this->DokumenPemohon);
        $paging = $this->request->params['paging']['DokumenPemohon'];
        $dokumenPemohon = $this->addRowNumber($dokumenPemohon);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $dokumenPemohon,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id DokumenPemohon id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $dokumenPemohon = $this->DokumenPemohon->get($id, [
            'contain' => [
                'JenisDokumen' => [
                    'fields' => [
                        'JenisDokumen.kode',
                        'JenisDokumen.deskripsi'
                    ]
                ]
            ]
        ]);

        $this->setResponseData($dokumenPemohon, $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $conditions = [
            'OR' => [
                'DokumenPemohon.no_dokumen ILIKE' => '%' . $this->_apiQueryString . '%',
                'JenisDokumen.kode ILIKE' => '%' . $this->_apiQueryString . '%',
                'JenisDokumen.deskripsi ILIKE' => '%' . $this->_apiQueryString . '%',
            ]
        ];

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        if ($pemohonId) {
            $conditions['DokumenPemohon.pemohon_id'] = $pemohonId;
        }

        $dokumenPemohon = $this->DokumenPemohon->find('all', [
            'fields' => ['id', 'no_dokumen', 'awal_berlaku', 'akhir_berlaku', 'jenis_dokumen_id', 'lokasi_dokumen'],
            'contain' => [
                'JenisDokumen' => [
                    'fields' => [ 'JenisDokumen.kode', 'JenisDokumen.deskripsi']
                ]
            ],
            'conditions' => $conditions,
            'limit' => $this->_autocompleteLimit
        ]);
        $data = array(
            'items' => $dokumenPemohon
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        try {
            $dokumenPemohon = $this->DokumenPemohon->newEntity();

            if ($this->request->is('post')) {
                $this->request->data['awal_berlaku'] = DynamicFormService::parseDate($this->request->data['awal_berlaku']);
                $this->request->data['akhir_berlaku'] = DynamicFormService::parseDate($this->request->data['akhir_berlaku']);

                if (!isset($this->request->data['pemohon_id']) || !$this->request->data['pemohon_id']) {
                    $this->request->data['pemohon_id'] = $this->getPemohonIdFromQueryStringOrSession();
                }

                $dokumenPemohon = $this->DokumenPemohon->patchEntity($dokumenPemohon, $this->request->data);

                if ($this->DokumenPemohon->save($dokumenPemohon)) {
                    $persyaratanIds = [];
                    $persyaratanTable = TableRegistry::get('Persyaratan');

                    // Get all persyaratan with that kind of document for related permohonan_izin
                    if ($this->request->getData('permohonan_izin_id')) {
                        $listPersyaratanPermohonan = $persyaratanTable->find('all', [
                            'fields' => ['id', 'permohonan_izin_id'],
                            'conditions' => [
                                'jenis_dokumen_id' => $dokumenPemohon->jenis_dokumen_id
                            ],
                            'contain' => [
                                'PermohonanIzin' => [
                                    'fields' => ['id'],
                                    'conditions' => [
                                        'PermohonanIzin.id' => $this->request->getData('permohonan_izin_id')
                                    ]
                                ]
                            ]
                        ]);

                        if ($listPersyaratanPermohonan) {
                            foreach ($listPersyaratanPermohonan as $persyaratan) {
                                $persyaratanIds[] = $persyaratan->id;
                            }
                        }
                    }

                    // Get all documents from that pemohon that has no no_dokumen or has same number
                    $listPersyaratan = $persyaratanTable->find('all', [
                        'fields' => ['id', 'permohonan_izin_id'],
                        'conditions' => [
                            'jenis_dokumen_id' => $dokumenPemohon->jenis_dokumen_id,
                            'OR' => [
                                'no_dokumen IS' => null,
                                'no_dokumen' => '',
                                'no_dokumen ' => $dokumenPemohon->no_dokumen
                            ]
                        ],
                        'contain' => [
                            'PermohonanIzin' => [
                                'fields' => ['id'],
                                'conditions' => [
                                    'pemohon_id' => $this->request->getData('pemohon_id')
                                ]
                            ]
                        ]
                    ]);

                    if ($listPersyaratan) {
                        foreach ($listPersyaratan as $persyaratan) {
                            $persyaratanIds[] = $persyaratan->id;
                        }
                    }

                    if (!empty($persyaratanIds)) {
                        $persyaratanTable->updateAll([
                            'awal_berlaku' => $dokumenPemohon->awal_berlaku,
                            'akhir_berlaku' => $dokumenPemohon->akhir_berlaku,
                            'no_dokumen' => $dokumenPemohon->no_dokumen,
                            'lokasi_dokumen' => $dokumenPemohon->lokasi_dokumen
                        ], [
                            'id IN' => $persyaratanIds
                        ]);
                    }

                    unset($persyaratanIds);

                    $success = true;
                    $message = __('Dokumen Pemohon berhasil disimpan.');
                } else {
                    $this->setErrors($dokumenPemohon->errors());
                    $message = __('Dokumen Pemohon tidak berhasil disimpan. Silahkan coba kembali.');
                }
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($dokumenPemohon, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id DokumenPemohon id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $dokumenPemohon = $this->DokumenPemohon->get($id, [
            'contain' => []
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $this->request->data['awal_berlaku'] = DynamicFormService::parseDate($this->request->data['awal_berlaku']);
            $this->request->data['akhir_berlaku'] = DynamicFormService::parseDate($this->request->data['akhir_berlaku']);

            if (!isset($this->request->data['pemohon_id'])) {
                $this->request->data['pemohon_id'] = $this->getPemohonIdFromQueryStringOrSession();
            }

            $dokumenPemohon = $this->DokumenPemohon->patchEntity($dokumenPemohon, $this->request->data);

            if ($this->DokumenPemohon->save($dokumenPemohon)) {
                $success = true;
                $message = __('Dokumen Pemohon berhasil disimpan.');
            } else {
                $this->setErrors($dokumenPemohon->errors());
                $message = __('Dokumen Pemohon tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($dokumenPemohon, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id DokumenPemohon id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $dokumenPemohon = $this->DokumenPemohon->get($id);

        if ($this->DokumenPemohon->delete($dokumenPemohon)) {
            $success = true;
            $message = __('Dokumen Pemohon berhasil dihapus.');
        } else {
            $message = __('Dokumen Pemohon tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Upload dokumen file
     */
    public function upload()
    {
        $data = [];
        $success = false;
        $message = '';

        try {
            UploadService::setInstansiID($this->getInstansiIdFromDataOrSession());
            $uploadData = UploadService::upload('file', 'dokumen_pemohon');
            $data['file_name'] = $uploadData['file_name'];
            $data['file_url'] = $uploadData['url'];

            $success = true;
            $message = 'Dokumen berhasil diupload';
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    public function downloadFile($id)
    {
        $dokumenPemohon = $this->DokumenPemohon->get($id);
        return $this->_downloadFile($dokumenPemohon->lokasi_dokumen, 'dokumen_pemohon');
    }
}
