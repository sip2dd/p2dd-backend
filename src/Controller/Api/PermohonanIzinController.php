<?php
namespace App\Controller\Api;

use Cake\I18n\Time;
use Cake\ORM\TableRegistry;
use Cake\Routing\Router;
use Cake\Filesystem\Folder;
use App\Model\Entity\PermohonanIzin;
use App\Model\Table\PermohonanIzinTable;
use App\Service\DynamicFormService;
use App\Service\UserService;
use App\Service\AlurProsesService;
use App\Service\NumberingService;
use App\Service\NotificationService;
use Cake\Http\Exception\BadRequestException;
use Phinx\Db\Table;
use Cake\I18n\FrozenTime;

/**
 * PermohonanIzin Controller
 *
 * @property \App\Model\Table\PermohonanIzinTable $PermohonanIzin
 */
class PermohonanIzinController extends ApiController
{

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->PermohonanIzin->setInstansi($this->getCurrentInstansi());
        $this->PermohonanIzin->setUnit($this->getCurrentUnit());
        $this->PermohonanIzin->setJenisIzinPengguna($this->getJenisIzinPengguna());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';
        $nib_id = $this->request->getQuery('nib_id') ? strtolower($this->request->getQuery('nib_id')) : null;

        $conditions = [
            'OR' => [
                'LOWER(PermohonanIzin.no_permohonan) ILIKE' => '%' . $this->_apiQueryString . '%',
                'LOWER(Pemohon.nama) ILIKE' => '%' . $this->_apiQueryString . '%',
                'LOWER(Perusahaan.nama_perusahaan) ILIKE' => '%' . $this->_apiQueryString . '%',
                'LOWER(JenisIzin.jenis_izin) ILIKE' => '%' . $this->_apiQueryString . '%',
                'LOWER(LatestProsesPermohonan.nama_proses) ILIKE' => '%' . $this->_apiQueryString . '%'
            ]
        ];

        if (!is_null($nib_id)) {
            array_push($conditions, ['LOWER(PermohonanIzin.nib_id)' => $nib_id]);
        }

        // If begin_date is provided
        if (isset($this->request->query['begin_date'])
            && !is_null($this->request->query['begin_date'])
            && $this->request->query['begin_date'] != 'null'
        ) {
            $beginDate = DynamicFormService::parseDate($this->request->query['begin_date']);
            $conditions['PermohonanIzin.tgl_pengajuan >='] = $beginDate;
        }

        // If end_date is provided
        if (isset($this->request->query['end_date'])
            && !is_null($this->request->query['end_date'])
            && $this->request->query['end_date'] != 'null'
        ) {
            $endDate = DynamicFormService::parseDate($this->request->query['end_date']);
            $conditions['PermohonanIzin.tgl_pengajuan <='] = $endDate;
        }

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        if ($pemohonId) {
            $conditions['PermohonanIzin.pemohon_id'] = $pemohonId;
        }

        $this->paginate = [
            'fields' => [
                'id',
                'no_permohonan',
                'instansi_id',
                'tgl_pengajuan',
                'nib_id'
            ],
            'contain' => [
                'Pemohon' => [
                    'fields' => [
                        'nama'
                    ]
                ],
                'Perusahaan' => [
                    'fields' => [
                        'nama_perusahaan'
                    ]
                ],
                'JenisIzin' => [
                    'fields' => [
                        'jenis_izin'
                    ]
                ],
                'LatestProsesPermohonan' => [
                    'fields' => [
                        'id', 'tautan', 'jenis_proses_id', 'nama_proses'
                    ]
                ]
            ],
            'order' => [
                $this->_apiQueryOrder
            ],
            'conditions' => $conditions
        ];

        $permohonanIzin = $this->paginate($this->PermohonanIzin);
        $paging = $this->request->params['paging']['PermohonanIzin'];
        $permohonanIzin = $this->addRowNumber($permohonanIzin);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $permohonanIzin,
            'total_items' => $paging['count']
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Permohonan Izin id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';
        $permohonanIzin = null;

        try {
            $noPermohonan = $this->request->getQuery('no_permohonan');

            if (!$id && !$noPermohonan) {
                throw new \Exception('permohonan_izin_id and no permohonan cannot be both empty');
            }

            if (is_null($id)) {
                $permohonanIzin = $this->PermohonanIzin->find('all', [
                    'fields' => ['id'],
                    'conditions' => ['no_permohonan' => $noPermohonan]
                ])->first();

                if (!$permohonanIzin) {
                    throw new \Exception('Permohonan Izin tidak ditemukan');
                }

                $id = $permohonanIzin->id;
            }

            $permohonanIzin = $this->PermohonanIzin->get($id, [
                'fields' => [
                    'id', 'no_permohonan', 'keterangan', 'pemohon_id', 'perusahaan_id', 'keterangan',
                    'jenis_permohonan', 'jenis_izin_id', 'no_izin_lama', 'tipe_pemohon', 'lokasi_izin',
                    'proses_permohonan_id', 'status', 'jenis_proyek_id', 'nilai_investasi', 'target_pad',
                    'jumlah_tenaga_kerja', 'instansi_id', 'instansi_id', 'unit_id'
                ],
                'contain' => [
                    'Pemohon' => [
                        'fields' => [
                            'id', 'nama', 'tipe_identitas', 'no_identitas', 'tempat_lahir', 'tgl_lahir',
                            'jenis_kelamin', 'pekerjaan', 'perusahaan_id', 'no_tlp', 'no_hp', 'email', 'alamat',
                            'desa_id', 'kecamatan_id', 'kabupaten_id', 'provinsi_id', 'kode_pos'
                        ]
                    ],
                    'Pemohon.Desa' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Pemohon.Kecamatan' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Pemohon.Kabupaten' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Pemohon.Provinsi' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Perusahaan' => [
                        'fields' => [
                            'id', 'nama_perusahaan', 'npwp', 'no_register', 'jenis_perusahaan', 'jumlah_pegawai',
                            'nilai_investasi', 'no_tlp', 'fax', 'email', 'alamat', 'desa_id', 'kecamatan_id',
                            'kabupaten_id', 'provinsi_id', 'kode_pos'
                        ]
                    ],
                    'Perusahaan.Desa' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Perusahaan.Kecamatan' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Perusahaan.Kabupaten' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Perusahaan.Provinsi' => [
                        'fields' => ['id', 'kode_daerah', 'nama_daerah']
                    ],
                    'Perusahaan.BidangUsaha' => [
                        'fields' => ['id', 'kode', 'keterangan', 'BidangUsahaPerusahaan.perusahaan_id']
                    ],
                    'Perusahaan.JenisUsaha' => [
                        'fields' => ['id', 'kode', 'keterangan', 'JenisUsahaPerusahaan.perusahaan_id']
                    ],
                    'JenisIzin' => [
                        'fields' => ['id', 'jenis_izin', 'unit_id']
                    ],
                    'Persyaratan' => [
                        'fields' => [
                            'id', 'jenis_dokumen_id', 'lokasi_dokumen', 'awal_berlaku', 'akhir_berlaku', 'no_dokumen',
                            'terpenuhi', 'permohonan_izin_id', 'wajib'
                        ]
                    ],
                    'Persyaratan.JenisDokumen' => [
                        'fields' => [
                            'id', 'kode', 'deskripsi'
                        ]
                    ],
                    'Instansi' => [
                        'fields' => [
                            'id', 'nama'
                        ]
                    ],
                    'Unit' => [
                        'fields' => [
                            'id', 'nama'
                        ]
                    ],
                    'LatestProsesPermohonan' => [
                        'fields' => [
                            'id', 'nama_proses'
                        ]
                    ]
                ]
            ]);

            Time::setJsonEncodeFormat('d/m/Y');

            // $permohonanIzin->pemohon->tgl_lahir = $this->_formatDate($permohonanIzin->pemohon->tgl_lahir);

            if ($permohonanIzin->pemohon) {
                $permohonanIzin->pemohon->tgl_lahir_display = $this->_formatDate($permohonanIzin->pemohon->tgl_lahir, $this->_defaultDateFormatDisplay);
            }

            if (!empty($permohonanIzin->persyaratan)) {
                foreach ($permohonanIzin->persyaratan as $index => $persyaratan) {
                    $permohonanIzin->persyaratan[$index]->awal_berlaku_display = $this->_formatDate($persyaratan->awal_berlaku, $this->_defaultDateFormatDisplay);
                    $permohonanIzin->persyaratan[$index]->akhir_berlaku_display = $this->_formatDate($persyaratan->akhir_berlaku, $this->_defaultDateFormatDisplay);
                }
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($permohonanIzin, $success, $message);
    }

    /**
     * Get List of Permohonan Izin
     */
    public function getList()
    {
        $success = true;
        $message = '';

        $permohonanIzin = $this->PermohonanIzin->find('all', [
            'fields' => ['id', 'no_permohonan', 'pemohon_id', 'perusahaan_id'],
            'contain' => [
                'Pemohon' => [
                    'fields' => ['nama']
                ],
                'Perusahaan' => [
                    'fields' => ['nama_perusahaan']
                ],
            ],
            'conditions' => [
                'OR' => [
                    'PermohonanIzin.no_permohonan ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pemohon.nama ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Perusahaan.nama_perusahaan ILIKE' => '%' . $this->_apiQueryString . '%',
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);
        $data = array(
            'items' => $permohonanIzin
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        try {
            $permohonanIzin = $this->PermohonanIzin->newEntity();

            if ($this->request->is('post')) {
                // If pemohon_id not provided, get from current user
                if (
                    empty($this->request->data['pemohon']) &&
                    empty($this->request->data['pemohon_id'])
                ) {
                    $this->request->data['pemohon_id'] = $this
                        ->getPemohonIdFromQueryStringOrSession();

                    if (!$this->request->data['pemohon_id']) {
                        throw new BadRequestException(
                            'Anda tidak dapat mengajukan permohonan'
                        );
                    }
                }

                $this->request->data['instansi_id'] = $this->getInstansiIdFromDataOrSession();
                $this->request->data['unit_id'] = $this->getUnitIdFromDataOrSession();

                if (!isset($this->request->data['tipe_pemohon'])) {

                    if (!isset($this->request->data['perusahaan_id'])) {
                        $this->request->data['tipe_pemohon'] = PermohonanIzinTable::TIPE_PEMOHON_PERUSAHAAN;
                    } else {
                        $this->request->data['tipe_pemohon'] = PermohonanIzinTable::TIPE_PEMOHON_PERORANGAN;
                    }
                } else {
                    $this->request->data['tipe_pemohon'] = strtoupper($this->request->data['tipe_pemohon']);
                }

                $generatedNumber = $this->_generateNomorIzin(
                    $this->request->getData('jenis_izin_id'),
                    $this->request->getData('jenis_permohonan'),
                    $this->request->getData('instansi_id'),
                    $this->request->getData('unit_id'),
                    true
                );

                if ($generatedNumber) {
                    $this->request->data['no_permohonan'] = $generatedNumber;
                }

                // If pemohon data is provided
                if (!empty($this->request->data['pemohon'])) {
                    $this->request->data['pemohon']['tgl_lahir'] =
                        DynamicFormService::parseDate(
                            $this->request->data['pemohon']['tgl_lahir']
                        );
                }

                if (!empty($this->request->data['persyaratan'])) {
                    foreach ($this->request->data['persyaratan'] as $index => $persyaratan) {
                        $this->request->data['persyaratan'][$index]['awal_berlaku'] = DynamicFormService::parseDate($persyaratan['awal_berlaku']);
                        $this->request->data['persyaratan'][$index]['akhir_berlaku'] = DynamicFormService::parseDate($persyaratan['akhir_berlaku']);
                    }
                }

                if ($this->request->data['tipe_pemohon'] == PermohonanIzinTable::TIPE_PEMOHON_PERUSAHAAN) {
                    $permohonanIzin = $this->PermohonanIzin->patchEntity(
                        $permohonanIzin,
                        $this->request->data,
                        ['associated' => [
                            'Pemohon', 'Perusahaan', 'Persyaratan'
                        ]]
                    );
                } else { // Jika pemohon perorangan
                    $permohonanIzin = $this->PermohonanIzin->patchEntity(
                        $permohonanIzin,
                        $this->request->data,
                        ['associated' => ['Pemohon', 'Persyaratan']]
                    );
                }

                if ($this->PermohonanIzin->save($permohonanIzin)) {
                    if ($this->request->data['tipe_pemohon'] == PermohonanIzinTable::TIPE_PEMOHON_PERUSAHAAN) {

                        if (!empty($this->request->data['perusahaan'])) {
                            $perusahaanTable = TableRegistry::get('Perusahaan');

                            if (!empty($this->request->data['perusahaan']['jenis_usaha_ids'])) {
                                $jenisUsaha = $this->PermohonanIzin->Perusahaan
                                    ->JenisUsaha
                                    ->find()
                                    ->where(['id IN' => $this->request->data['perusahaan']['jenis_usaha_ids']])
                                    ->toArray();
                                $perusahaanTable->JenisUsaha->link($permohonanIzin->perusahaan, $jenisUsaha);
                            }

                            if (!empty($this->request->data['perusahaan']['bidang_usaha_ids'])) {
                                $bidangUsaha = $this
                                    ->PermohonanIzin
                                    ->Perusahaan
                                    ->BidangUsaha
                                    ->find()
                                    ->where(['id IN' => $this->request->data['perusahaan']['bidang_usaha_ids']])
                                    ->toArray();
                                $perusahaanTable->BidangUsaha->link($permohonanIzin->perusahaan, $bidangUsaha);
                            }

                            // Link Pemohon to Perusahaan
                            $perusahaan = $perusahaanTable->get($permohonanIzin->perusahaan->id);
                            if ($perusahaan) {
                                $perusahaan->pemohon_id = $permohonanIzin->pemohon->id;
                                $perusahaanTable->save($perusahaan);
                            }
                        }
                    }

                    // Generate proses_permohonan data
                    if (!AlurProsesService::generateProsesPermohonan($permohonanIzin->id)) {
                        throw new \Exception('Terjadi kesalahan saat membuat proses permohonan');
                    }

                    $permohonanIzin = $this->PermohonanIzin->get($permohonanIzin->id);
                    NotificationService::sendNotification($permohonanIzin);

                    $success = true;
                    $message = __('Permohonan Izin berhasil disimpan.');
                } else {
                    $this->setErrors($permohonanIzin->errors());
                    $message = __('Permohonan Izin tidak berhasil disimpan. Silahkan coba kembali.');
                }
            }

        } catch (\Exception $ex) {
            // Delete newly generated permohonan izin
            if ($permohonanIzin instanceof PermohonanIzin) {
                $this->PermohonanIzin->delete($permohonanIzin);
            }

            $message = $ex->getMessage();
        }

        $this->setResponseData($permohonanIzin, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Permohonan Izin id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        try {
            $permohonanIzin = $this->PermohonanIzin->get($id, [
                'contain' => [
                    'Pemohon',
                    'Perusahaan',
                    'Persyaratan'
                ]
            ]);
            if ($this->request->is(['patch', 'post', 'put'])) {
                $this->request->data['pemohon']['tgl_lahir'] = DynamicFormService::parseDate($this->request->data['pemohon']['tgl_lahir']);
                unset($this->request->data['jenis_permohonan']);

                if (!empty($this->request->data['persyaratan'])) {
                    foreach ($this->request->data['persyaratan'] as $index => $persyaratan) {
                        $this->request->data['persyaratan'][$index]['awal_berlaku'] = DynamicFormService::parseDate($persyaratan['awal_berlaku']);
                        $this->request->data['persyaratan'][$index]['akhir_berlaku'] = DynamicFormService::parseDate($persyaratan['akhir_berlaku']);
                    }
                }

                if ($this->request->data['tipe_pemohon'] == PermohonanIzinTable::TIPE_PEMOHON_PERUSAHAAN) {
                    $permohonanIzin = $this->PermohonanIzin->patchEntity($permohonanIzin, $this->request->data, ['associated' => ['Pemohon', 'Perusahaan', 'Persyaratan']]);
                } else { // Jika pemohon perorangan
                    $permohonanIzin = $this->PermohonanIzin->patchEntity($permohonanIzin, $this->request->data, ['associated' => ['Pemohon', 'Persyaratan']]);
                }

                if ($this->PermohonanIzin->save($permohonanIzin)) {

                    if ($this->request->data['tipe_pemohon'] == PermohonanIzinTable::TIPE_PEMOHON_PERUSAHAAN) {

                        if (!empty($this->request->data['perusahaan'])) {
                            $perusahaanTable = TableRegistry::get('Perusahaan');

                            // Saving Jenis Usaha
                            if (!empty($this->request->data['perusahaan']['jenis_usaha_ids'])) {
                                $jenisUsaha = $this->PermohonanIzin->Perusahaan->JenisUsaha->find()->where(['id IN' => $this->request->data['perusahaan']['jenis_usaha_ids']])->toArray();
                                $perusahaanTable->JenisUsaha->link($permohonanIzin->perusahaan, $jenisUsaha);
                            }

                            // Saving Bidang Usaha
                            if (!empty($this->request->data['perusahaan']['bidang_usaha_ids'])) {
                                $bidangUsaha = $this->PermohonanIzin->Perusahaan->BidangUsaha->find()->where(['id IN' => $this->request->data['perusahaan']['bidang_usaha_ids']])->toArray();
                                $perusahaanTable->BidangUsaha->link($permohonanIzin->perusahaan, $bidangUsaha);
                            }

                            // Link Pemohon to Perusahaan
                            $perusahaan = $perusahaanTable->get($permohonanIzin->perusahaan->id);
                            if ($perusahaan) {
                                $perusahaan->pemohon_id = $permohonanIzin->pemohon->id;
                                $perusahaanTable->save($perusahaan);
                            }
                        }
                    }

                    $success = true;
                    $message = __('Permohonan Izin berhasil disimpan.');

                } else {
                    $this->setErrors($permohonanIzin->errors());
                    $message = __('Permohonan Izin tidak berhasil disimpan. Silahkan coba kembali.');
                }
            }

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($permohonanIzin, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Permohonan Izin id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $permohonanIzin = $this->PermohonanIzin->get($id);

        if ($this->PermohonanIzin->delete($permohonanIzin)) {
            $success = true;
            $message = __('Permohonan Izin berhasil dihapus.');
        } else {
            $message = __('Permohonan Izin tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Mendapatkan List Semua Proses Permohonan dari suatu Permohonan Izin
     * @param $permohonanIzinId
     */
    public function getProsesPermohonan($permohonanIzinId = null)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            $jenisProsesIdsPengguna = $this->getJenisProsesPengguna();
            $prosesPermohonanTable = TableRegistry::get('proses_permohonan');
            $prosesPermohonan = $prosesPermohonanTable->find('all', [
                'fields' => [
                    'id',
                    'status',
                    'nama_proses',
                    'tautan',
                    'form_id',
                    'template_data_id',
                    'jenis_proses_id',
                    'tipe',
                    'diproses_oleh',
                    'end_date',
                    'tgl_dibuat'
                ],
                'conditions' => [
                    'permohonan_izin_id' => $permohonanIzinId,
                    'status !=' => AlurProsesService::STATUS_DROP
                ],
                'order' => [
                    'id' => 'ASC'
                ]
            ])->toArray();

            if (!empty($prosesPermohonan)) {
                foreach ($prosesPermohonan as $index => $proses) {
                    $prosesPermohonan[$index]['disabled'] = false;

                    // Check if current User has access to that jenis_proses_id
                    if ($jenisProsesIdsPengguna && is_array($jenisProsesIdsPengguna)) {
                        if (!in_array($proses->jenis_proses_id, $jenisProsesIdsPengguna)) {
                            $prosesPermohonan[$index]['disabled'] = true;
                        }
                    }
                }

                $success = true;
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        FrozenTime::setJsonEncodeFormat('d/MM/Y HH:mm:ss');
        $this->setResponseData($prosesPermohonan, $success, $message);
    }

    /**
     * Mendapatkan List Semua Permohonan Izin
     * @param $permohonanIzinId
     */
    public function getPermohonanIzin($nibId = null)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            $jenisProsesIdsPengguna = $this->getJenisProsesPengguna();
            $prosesPermohonanTable = TableRegistry::get('permohonan_izin');
            $prosesPermohonan = $prosesPermohonanTable->find('all', [
                'fields' => [
                    'id',
                    'status',
                    'nama_proses',
                    'tautan',
                    'form_id',
                    'template_data_id',
                    'jenis_proses_id',
                    'tipe',
                    'diproses_oleh',
                    'end_date',
                    'tgl_dibuat'
                ],
                'conditions' => [
                    'permohonan_izin_id' => $permohonanIzinId
                ],
                'order' => [
                    'id' => 'ASC'
                ]
            ])->toArray();

            if (!empty($prosesPermohonan)) {
                foreach ($prosesPermohonan as $index => $proses) {
                    $prosesPermohonan[$index]['disabled'] = false;

                    // Check if current User has access to that jenis_proses_id
                    if ($jenisProsesIdsPengguna && is_array($jenisProsesIdsPengguna)) {
                        if (!in_array($proses->jenis_proses_id, $jenisProsesIdsPengguna)) {
                            $prosesPermohonan[$index]['disabled'] = true;
                        }
                    }
                }

                $success = true;
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        FrozenTime::setJsonEncodeFormat('d/MM/Y HH:mm:ss');
        $this->setResponseData($prosesPermohonan, $success, $message);
    }

    /**
     * Membuka Proses Permohonan selanjutnya dari sebuah Permohonan Izin
     */
    public function getNextProcess()
    {
        $message = '';
        $success = false;
        $newProcess = [];

        $permohonanIzinId = (int) $this->request->data['permohonan_id'];
        $prosesPermohonanId = $this->request->data['proses_permohonan_id'];

        if ($prosesPermohonanId) {
            $success = true;

            AlurProsesService::openNextStep($permohonanIzinId, $prosesPermohonanId, $this->getCurrentUsername());
            $permohonanIzin = $this->PermohonanIzin->get($permohonanIzinId);
            NotificationService::sendNotification($permohonanIzin);

            $conditions = [
                'ProsesPermohonan.permohonan_izin_id' => $permohonanIzinId
            ];

            // Get next proses ID
            $nextProsesId = AlurProsesService::getNextProsesId();

            if ($nextProsesId) {
                $prosesPermohonan = $this->PermohonanIzin->ProsesPermohonan->find('all', [
                    'conditions' => ['ProsesPermohonan.id' => $nextProsesId],
                    'order' => ['ProsesPermohonan.id' => 'ASC']
                ])->first();

                if ($prosesPermohonan) {
                    $jenisProsesIdsPengguna = $this->getJenisProsesPengguna();

                    if (AlurProsesService::isAllowedProcess(
                        $prosesPermohonan->jenis_proses_id,
                        $jenisProsesIdsPengguna
                    )) {
                        $newProcess = $prosesPermohonan;
                    }
                }
            }
        }

        $this->setResponseData($newProcess, $success, $message);
    }

    public function getTipePemohonList()
    {
        $success = true;
        $message = '';

        $tipePemohonList = [];
        $tipePemohonList[] = array(
            'kode' => PermohonanIzinTable::TIPE_PEMOHON_PERUSAHAAN,
            'label' => 'Perusahaan',
        );
        $tipePemohonList[] = array(
            'kode' => PermohonanIzinTable::TIPE_PEMOHON_PERORANGAN,
            'label' => 'Perorangan',
        );

        $data = array(
            'items' => $tipePemohonList
        );

        $this->setResponseData($data, $success, $message);
    }

    public function getJenisProyekList()
    {
        $success = true;
        $message = '';

        $jenisProyekTable = TableRegistry::get('JenisProyek');
        $jenisProyekList = $jenisProyekTable->find('all', [
            'fields' => ['id', 'keterangan']
        ]);

        $data = array(
            'items' => $jenisProyekList
        );

        $this->setResponseData($data, $success, $message);
    }

    public function getNomorIzin($jenisIzinId, $jenisPengajuan)
    {
        $success = true;
        $message = '';
        $data = [];
        $instansiId = null;
        $unitId = null;

        if (!empty($this->request->getQuery('instansi_id'))) {
            $instansiId = $this->request->getQuery('instansi_id');
        }

        if (!empty($this->request->getQuery('unit_id'))) {
            $unitId = $this->request->getQuery('unit_id');
        }

        $data = $this->_generateNomorIzin($jenisIzinId, $jenisPengajuan, $instansiId, $unitId);

        $this->setResponseData($data, $success, $message);
    }

    private function _generateNomorIzin($jenisIzinId, $jenisPengajuan, $instansiId = null, $unitId = null, $updateSequence = false)
    {
        $number = null;

        if (!$instansiId) {
            $instansi = $this->getCurrentInstansi();
            if ($instansi) {
                $instansiId = $instansi->id;
            }
        }

        if (!$unitId) {
            $unit = $this->getCurrentUnit();
            $unitId = isset($unit->id) ? $unit->id : null;
        }

        if ($instansiId) {
            $jenisPengajuanTable = TableRegistry::get('JenisPengajuan');
            $jenisPengajuan = $jenisPengajuanTable->find(
                'all', 
                [
                    'fields' => ['jenis_izin_id'],
                    'conditions' => [
                        'jenis_izin_id' => $jenisIzinId,
                        'jenis_pengajuan' => $jenisPengajuan
                    ],
                    'contain' => [
                        'Penomoran' => ['fields' => ['id']]
                    ]
                ]
            )->first();

            if (isset($jenisPengajuan->penomoran) && !empty($jenisPengajuan->penomoran)) {
                // Generate new data but don't update the last number
                $number = NumberingService::getFormattedNumber($jenisPengajuan->penomoran->id, $instansiId, $unitId, $updateSequence);
            }
        }

        return $number;
    }

    /**
     * For Android
     * Upload file tanda tangan for a report
     */
    public function uploadSignature()
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            $photo = $this->request->data['photo'];
            $permohonanIzinId = $this->request->data['permohonan_izin_id'];

            $permohonanIzin = $this->PermohonanIzin->get($permohonanIzinId, [
                'fields' => [
                    'id', 'no_permohonan', 'file_tanda_tangan', 'proses_permohonan_id'
                ]
            ]);

            // Create Image and Thumbnail
            if (!$uploadedData = $this->cropPhoto($photo)) {
                throw new \Exception('Tidak berhasil upload tanda tangan');
            }

            // Get Proses Permohonan
            $prosesPermohonanTable = $this->PermohonanIzin->LatestProsesPermohonan;
            $prosesPermohonan = $prosesPermohonanTable->get($permohonanIzin->proses_permohonan_id);
            if (!$prosesPermohonan) {
                throw new \Exception('Proses permohonan tidak ditemukan');
            }

            // Save URL File Penandatangan
            $prosesPermohonan->file_tanda_tangan = $uploadedData['path'];
            $prosesPermohonan->tgl_tanda_tangan = Time::now();
            if (!$prosesPermohonanTable->save($prosesPermohonan)) {
                throw new \Exception('Tidak berhasil menyimpan tanda tangan ke Permohonan Izin');
            }

            $data['url'] = $uploadedData['url'];
            $message = 'Tanda tangan berhasil diupload untuk permohonan izin:' . $permohonanIzinId;
            $success = true;

        } catch (\Exception $ex) {
            $message = $ex->getMessage();
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Crop photo
     * @param string $photoData
     * @return bool
     */
    private function cropPhoto($base64Data)
    {
        $templateDir = new Folder(WWW_ROOT . 'files' . DS . 'signature', true, 0755);

        if (!$templateDir->path) {
            throw new \Exception('Folder tidak dapat diakses');
        }

        $filename = date('YmdHis') . '.png';
        $destination = $templateDir->path . DS . $filename;

        // BEGIN - Create base photo
        $data = base64_decode($base64Data);
        $im = imagecreatefromstring($data);
        imagealphablending($im, false);
        imagesavealpha($im, true);
        if ($im == false) {
            return false;
        }

        imagepng($im, $destination); // Create the file
        imagedestroy($im);
        // END - Create base photo

        if (file_exists($destination)) {
            // Create Thumbnail photo
            /*$imagine = new \Imagine\Gd\Imagine();
            $thumbFile = $filename . '-thumb.png';
            $thumbDestination = $templateDir->path . DS . $thumbFile;

            $image = $imagine->open($destination);
            $thumbnail = $image->thumbnail(new \Imagine\Image\Box(200, 200), 'outbound');
            $thumbnail->save($thumbDestination);
            return true;*/

            return [
                'url' => Router::url('/webroot/files/signature/' . $filename, true),
                'path' => '/webroot/files/signature/' . $filename
            ];
        }

        return false;
    }

    /**
     * For Android
     * Get Permohonan Izin which are needed to be signed
     */
    public function getPermohonanToSign()
    {
        $success = true;
        $message = '';

        $permohonanIzin = $this->PermohonanIzin->find('all', [
            'fields' => [
                'id', 'no_permohonan', 'pemohon_id', 'perusahaan_id', 'jenis_izin_id', 'proses_permohonan_id'
            ],
            'contain' => [
                'JenisIzin' => [
                    'fields' => ['jenis_izin']
                ],
                'Pemohon' => [
                    'fields' => ['nama']
                ],
                'Perusahaan' => [
                    'fields' => ['nama_perusahaan']
                ],
                'LatestProsesPermohonan' => function (\Cake\ORM\Query $query) {
                    return $query
                        ->select(['id', 'permohonan_izin_id'])
                        ->where([
                            'LatestProsesPermohonan.file_tanda_tangan IS' => null,
                            'LatestProsesPermohonan.tipe' => 'report'
                        ]);
                },
            ],
            'conditions' => [
                'OR' => [
                    'PermohonanIzin.no_permohonan ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pemohon.nama ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Perusahaan.nama_perusahaan ILIKE' => '%' . $this->_apiQueryString . '%',
                ],
                // 'PermohonanIzin.status_penetapan' => PermohonanIzinTable::STATUS_DITETAPKAN
            ],
            'limit' => $this->_autocompleteLimit
        ])->toArray();

        foreach ($permohonanIzin as $key => $permohonan) {
            if (!$permohonan['perusahaan']) {
                $permohonanIzin[$key]['perusahaan'] = ['nama_perusahaan' => ''];
            }
        }

        $this->setResponseData($permohonanIzin, $success, $message);
    }

    /**
     * For Android
     * Get List of Permohonan Izin to certify
     */
    public function getPermohonanToCertify()
    {
        $success = true;
        $message = '';

        $permohonanIzin = $this->PermohonanIzin->find('all', [
            'fields' => [
                'id', 'no_permohonan', 'pemohon_id', 'perusahaan_id', 'jenis_izin_id', 'proses_permohonan_id'
            ],
            'contain' => [
                'JenisIzin' => [
                    'fields' => ['jenis_izin']
                ],
                'Pemohon' => [
                    'fields' => ['nama']
                ],
                'Perusahaan' => [
                    'fields' => ['nama_perusahaan']
                ],
                'LatestProsesPermohonan' => function (\Cake\ORM\Query $query) {
                    return $query
                        ->select(['id', 'permohonan_izin_id', 'template_data_id'])
                        ->where([
                            'LatestProsesPermohonan.file_signed_report IS' => null,
                            'LatestProsesPermohonan.tautan' => AlurProsesService::TAUTAN_SIGNATURE,
                        ]);
                },
            ],
            'conditions' => [
                'OR' => [
                    'PermohonanIzin.no_permohonan ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Pemohon.nama ILIKE' => '%' . $this->_apiQueryString . '%',
                    'Perusahaan.nama_perusahaan ILIKE' => '%' . $this->_apiQueryString . '%',
                ],
                // 'PermohonanIzin.status_penetapan' => PermohonanIzinTable::STATUS_DITETAPKAN
            ],
            'limit' => $this->_autocompleteLimit
        ])->toArray();

        foreach ($permohonanIzin as $key => $permohonan) {
            if (!$permohonan['perusahaan']) {
                $permohonanIzin[$key]['perusahaan'] = ['nama_perusahaan' => ''];
            }
            $templateDataId = $permohonan['latest_proses_permohonan']['template_data_id'];
            $permohonanIzin[$key]['pdf_url'] = Router::url(
                sprintf(
                    "/api/TemplateData/generatereporttosign/%s?key_id=%s",
                    $templateDataId,
                    $permohonan['id']
                ),
                true
            );
            $permohonanIzin[$key]['pdf_name'] = sprintf(
                "%s_%s.pdf", date("Ymd"), $templateDataId
            );
            
            unset($permohonanIzin[$key]['latest_proses_permohonan']);
        }

        $this->setResponseData($permohonanIzin, $success, $message);
    }

    public function listNib()
    {
        $success = true;
        $message = '';

        $conditions = [
            'PermohonanIzin.nib_id IS NOT NULL',
            'OR' => [
                'LOWER(PermohonanIzin.no_permohonan) ILIKE' => '%' . $this->_apiQueryString . '%',
                'LOWER(Pemohon.nama) ILIKE' => '%' . $this->_apiQueryString . '%',
                'LOWER(Perusahaan.nama_perusahaan) ILIKE' => '%' . $this->_apiQueryString . '%'
            ]
        ];

        // Get pemohon_id
        $pemohonId = $this->getPemohonIdFromQueryStringOrSession();
        if ($pemohonId) {
            $conditions['PermohonanIzin.pemohon_id'] = $pemohonId;
        }

        $this->paginate = [
            'fields' => [
                'id',
                'no_permohonan',
                'instansi_id',
                'tgl_pengajuan',
                'nib_id'
            ],
            'contain' => [
                'Pemohon' => [
                    'fields' => [
                        'nama'
                    ]
                ],
                'Perusahaan' => [
                    'fields' => [
                        'nama_perusahaan'
                    ]
                ]
            ],
            'order' => [
                $this->_apiQueryOrder
            ],
            'conditions' => $conditions
        ];

        $permohonanIzin = $this->paginate($this->PermohonanIzin);
        $paging = $this->request->params['paging']['PermohonanIzin'];
        $permohonanIzin = $this->addRowNumber($permohonanIzin);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $permohonanIzin,
            'total_items' => $paging['count']
        );

        $this->setResponseData($data, $success, $message);
    }
}