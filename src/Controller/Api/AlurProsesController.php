<?php
namespace App\Controller\Api;

use App\Model\Entity\AlurProses;
use App\Service\AlurProsesService;

/**
 * AlurProses Controller
 *
 * @property \App\Model\Table\AlurProsesTable $AlurProses
 */
class AlurProsesController extends ApiController
{

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->AlurProses->setInstansi($this->getCurrentInstansi());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $this->paginate = [
            'contain' => [
                'Instansi' => ['fields' => ['id', 'nama']]
            ],
            'conditions' => [
                'OR' => [
                    'AlurProses.keterangan ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'order' => [
                'AlurProses.keterangan' => 'ASC'
            ]
        ];

        $alurProses = $this->paginate($this->AlurProses);
        $paging = $this->request->params['paging']['AlurProses'];
        $alurProses = $this->addRowNumber($alurProses);
        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $alurProses,
            'total_items' => $paging['count']
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Alur Proses id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $alurProses = $this->AlurProses->get($id, [
            'fields' => [
                'AlurProses.id',
                'AlurProses.keterangan',
            ],
            'contain' => [
                'DaftarProses' => [
                    'fields' => [
                        'id', 'no', 'tautan', 'nama_proses', 'alur_proses_id', 'jenis_proses_id', 'form_id', 'template_data_id', 'tipe'
                    ],
                    'sort' => ['no' => 'ASC']
                ],
                'DaftarProses.JenisProses' => [
                    'fields' => [
                        'id', 'kode', 'nama_proses', 'tautan'
                    ]
                ],
                'DaftarProses.Form' => [
                    'fields' => [
                        'id', 'nama_form'
                    ]
                ],
                'DaftarProses.TemplateData' => [
                    'fields' => [
                        'id', 'keterangan'
                    ]
                ]
            ],
        ]);

        $this->setResponseData($alurProses, $success, $message);
    }

    /**
     * Copy Alur Proses
     *
     * @param int $id
     * @return void
     */
    public function copyAlur($id)
    {
        $success = false;
        $message = '';

        $alurProses = $this->AlurProses->get($id, [
            'contain' => [
                'DaftarProses' => [
                    'sort' => ['no' => 'ASC']
                ]
            ],
        ])->toArray();

        if ($this->request->is(['patch', 'post', 'put']) && !empty($alurProses)) {
            AlurProsesService::setInstansi($this->getCurrentInstansi());
            $data = AlurProsesService::prepareCopyAlurProses($alurProses);

            $newAlur = $this->AlurProses->newEntity();
            $newAlur = $this->AlurProses->patchEntity(
                $newAlur,
                $data, [
                    'associated' => [
                        'DaftarProses'
                    ]
                ]
            );

            if ($this->AlurProses->save($newAlur)) {
                $success = true;
                $message = __('Alur Proses berhasil diduplikasi.');
            } else {
                $this->setErrors($newAlur->errors());
                $message = __('Alur Proses tidak berhasil diduplikasi. Silahkan coba kembali.');
            }
        }
        $this->setResponseData([], $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $alurProses = $this->AlurProses->find('all', [
            'fields' => ['AlurProses.id', 'AlurProses.keterangan'],
            'conditions' => [
                'OR' => [
                    'AlurProses.keterangan ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'limit' => $this->_autocompleteLimit
        ]);

        $data = array(
            'items' => $alurProses
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $alurProses = $this->AlurProses->newEntity();
        if ($this->request->is('post')) {
            $alurProses = $this->AlurProses->patchEntity($alurProses, $this->request->data, ['associated' => ['DaftarProses']]);
            if ($this->AlurProses->save($alurProses)) {
                $success = true;
                $message = __('alur proses berhasil disimpan.');
            } else {
                $this->setErrors($alurProses->errors());
                $message = __('alur proses tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($alurProses, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Alur Prose id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $alurProses = $this->AlurProses->get($id, [
            'contain' => []
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $alurProses = $this->AlurProses->patchEntity($alurProses, $this->request->data, ['associated' => ['DaftarProses']]);
            if ($this->AlurProses->save($alurProses)) {
                $success = true;
                $message = __('alur proses berhasil disimpan.');
            } else {
                $this->setErrors($alurProses->errors());
                $message = __('alur proses tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($alurProses, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Alur Prose id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $jenisProses = $this->AlurProses->get($id);

        if ($this->AlurProses->delete($jenisProses)) {
            $success = true;
            $message = __('alur proses berhasil dihapus.');
        } else {
            $message = __('alur proses tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    public function deleteJenisProses($alurProsesId, $jenisProsesId)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['delete']);
        $alurProses = $this->AlurProses->get($alurProsesId);
        $jenisProses = $this->AlurProses->JenisProses->find()->where(['JenisProses.id' => $jenisProsesId])->toArray();

        if ($alurProses && $jenisProses)
        {
            $this->AlurProses->JenisProses->unlink($alurProses, $jenisProses);
            $success = true;
            $message = __('jenis proses berhasil dihapus.');
        }
        else {
            $message = __('jenis proses tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getTipeProses()
    {
        $success = true;
        $message = '';

        $tipeProses = [];
        $tipeProses[] = array(
            'kode' => 'form',
            'label' => 'Form',
        );
        $tipeProses[] = array(
            'kode' => 'report',
            'label' => 'Report',
        );

        $data = array(
            'items' => $tipeProses
        );

        $this->setResponseData($data, $success, $message);
    }

    public function getTautanList()
    {
        $success = true;
        $message = '';

        $items = [];
        $items[] = array(
            'kode' => AlurProsesService::TAUTAN_PERMOHONAN_ADD,
            'label' => 'permohonan-izin-add',
        );
        $items[] = array(
            'kode' => AlurProsesService::TAUTAN_PERMOHONAN_EDIT,
            'label' => 'permohonan-izin-edit',
        );
        $items[] = array(
            'kode' => AlurProsesService::TAUTAN_FORM_ADD,
            'label' => 'form',
        );
        $items[] = array(
            'kode' => AlurProsesService::TAUTAN_REPORT,
            'label' => 'report',
        );
        $items[] = array(
            'kode' => AlurProsesService::TAUTAN_RETRIBUSI,
            'label' => 'retribusi',
        );
        $items[] = array(
            'kode' => AlurProsesService::TAUTAN_SIGNATURE,
            'label' => 'sign report',
        );

        $data = array(
            'items' => $items
        );

        $this->setResponseData($data, $success, $message);
    }
}
