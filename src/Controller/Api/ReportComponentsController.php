<?php
namespace App\Controller\Api;

use App\Model\Entity\ReportComponents;

/**
 * ReportComponents Controller
 *
 * @property \App\Model\Table\ReportComponentsTable $ReportComponents
 */
class ReportComponentsController extends ApiController
{
    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->ReportComponents->setInstansi($this->getCurrentInstansi());
        $this->ReportComponents->Instansi->setInstansi($this->getCurrentInstansi());
        $this->ReportComponents->ReportComponentDetails->Pegawai->setInstansi($this->getCurrentInstansi());
    }

    /**
     * View method
     *
     * @param string|null $jenisIzinId Jenis Izin id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($jenisIzinId = null)
    {
        $success = true;
        $message = '';

        $reportComponent = $this->ReportComponents->JenisIzin->find('all', [
            'fields' => [
                'id', 'jenis_izin'
            ],
            'contain' => [
                'JenisPengajuan' => [
                    'fields' => ['id', 'jenis_izin_id', 'alur_proses_id', 'jenis_pengajuan']
                ],
                'JenisPengajuan.AlurProses' => [
                    'fields' => ['id', 'keterangan']

                ],
                'JenisPengajuan.AlurProses.DaftarProses' => function (\Cake\ORM\Query $query) {
                    return $query
                        ->select(['id', 'no', 'alur_proses_id', 'jenis_proses_id', 'nama_proses', 'tipe'])
                        ->where(['tipe' => 'report']);
                },
                'ReportComponents' => [
                    'fields' => ['id', 'jenis_izin_id']
                ],
                'ReportComponents.ReportComponentDetails' => [
                    'fields' => [
                        'id', 'report_component_id', 'daftar_proses_id', 'pegawai_id'
                    ]
                ]
            ],
            'conditions' => [
                'JenisIzin.id' => $jenisIzinId
            ]
        ])->first();

        $mapDetail = [];

        if ($reportComponent->report_component && $reportComponent->report_component->report_component_details) {

            foreach ($reportComponent->report_component->report_component_details as $reportComponentDetail) {
                $mapDetail[$reportComponentDetail->daftar_proses_id][] = $reportComponentDetail;
            }

            unset($reportComponent->report_component->report_component_details);
        }

        if ($reportComponent) {
            // TODO read proses from overriden alur proses
            foreach ($reportComponent->jenis_pengajuan as &$jenisPengajuan) {
                
                foreach ($jenisPengajuan->alur_prose->daftar_proses as &$daftarProses) {
                    
                    if (array_key_exists($daftarProses->id, $mapDetail)) {
                        $daftarProses->details = $mapDetail[$daftarProses->id];
                    } else {
                        $daftarProses->details = [];
                    }
                    
                }
            }
        }

        $this->setResponseData($reportComponent, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Jenis Izin id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($jenisIzinId = null)
    {
        $success = false;
        $message = '';
        $reportComponent = null;
        $isNew = false;
        $patchData = null;

        $reportComponent = $this->ReportComponents->find('all', [
            'fields' => [
                'id', 'jenis_izin_id'
            ],
            'contain' => [
                'ReportComponentDetails' => [
                    'fields' => [
                        'id', 'report_component_id', 'daftar_proses_id', 'pegawai_id'
                    ]
                ]
            ],
            'conditions' => [
                'jenis_izin_id' => $jenisIzinId
            ]
        ])->first();

        if (!$reportComponent) {
            $reportComponent = $this->ReportComponents->newEntity();
            $isNew = true;
        }

        if ($this->request->is(['patch', 'post', 'put'])) {
            if ($isNew) {
                $patchData = ['jenis_izin_id' => $jenisIzinId];
            }

            // Parse ReportComponents Detail setting data
            foreach ($this->request->data['jenis_izin']['jenis_pengajuan'] as $pengajuan) {
                foreach ($pengajuan['alur_prose']['daftar_proses'] as $daftarProses) {
                    foreach ($daftarProses['details'] as $detail) {
                        $patchData['report_component_details'][] = $detail;
                    }
                }
            }
            
            // return $this->setResponseData($patchData, false);
            $reportComponent = $this->ReportComponents->patchEntity($reportComponent, $patchData,
                [
                    'associated' => ['ReportComponentDetails']
                ]
            );

            if ($this->ReportComponents->save($reportComponent)) {
                $success = true;
                $message = __('Report Component berhasil disimpan.');
            } else {
                $this->setErrors($reportComponent->errors());
                $message = __('Report Component tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($reportComponent, $success, $message);
    }

    public function getSupportData()
    {
        $success = true;
        $message = '';

        // List Pegawai
        $pegawai = $this->ReportComponents->ReportComponentDetails->Pegawai->find(
            'all',
            [
                'fields' => ['id', 'nama', 'posisi', 'nomor_induk'],
                'limit' => $this->_autocompleteLimit
            ]
        );

        $data = [
            'pegawailist' => $pegawai
        ];

        $this->setResponseData($data, $success, $message);
    }

    public function deleteReportComponentDetail($reportComponentDetailId)
    {
        $success = false;
        $message = '';

        $this->request->allowMethod(['post', 'delete']);
        $reportComponentDetail = $this->ReportComponents->ReportComponentDetails->get($reportComponentDetailId);
        
        if ($this->ReportComponents->ReportComponentDetails->delete($reportComponentDetail)) {
            $success = true;
            $message = __('Report Component Detail berhasil dihapus.');
        } else {
            $message = __('Report Component Detail tidak berhasil dihapus. Silahkan coba kembali.');
        }
        
        $this->setResponseData($reportComponentDetail, $success, $message);
    }
}
