<?php
namespace App\Controller\Api;

use App\Controller\Api\ApiController;
use App\Model\Entity\Menu;
use Cake\Datasource\ConnectionManager;

/**
 * Menu Controller
 *
 * @property \App\Model\Table\MenuTable $Menu
 */
class MenuController extends ApiController
{
    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Menu->setInstansi($this->getCurrentInstansi());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $this->paginate = [
            'contain' => ['ParentMenu'],
            'conditions' => [
                'OR' => [
                    'Menu.label_menu ILIKE' => '%' . $this->_apiQueryString . '%',
                ],
            ],
        ];
        $menu = $this->paginate($this->Menu);
        $paging = $this->request->params['paging']['Menu'];
        $menu = $this->addRowNumber($menu);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $menu,
            'total_items' => $paging['count'],
        );

        $this->setResponseData($data, $success, $message);
    }

    public function getList()
    {
        $success = true;
        $message = '';

        $menu = $this->Menu->find('all', [
            'fields' => ['Menu.id', 'Menu.label_menu'],
            'conditions' => [
                'OR' => [
                    'Menu.label_menu ILIKE' => '%' . $this->_apiQueryString . '%',
                ],
            ],
            'limit' => $this->_autocompleteLimit,
        ]);
        $data = array(
            'items' => $menu,
        );

        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Menu id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $menu = $this->Menu->get($id, [
            'contain' => [
                'ParentMenu', 'Peran', 'ChildMenu',
                'MenuModule' => [
                    'sort' => ['MenuModule.id' => 'ASC'],
                ],
            ],
        ]);

        $this->setResponseData($menu, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $menu = $this->Menu->newEntity();
        if ($this->request->is('post')) {
            $menu = $this->Menu->patchEntity($menu, $this->request->data, ['associated' => ['MenuModule']]);
            if ($this->Menu->save($menu)) {
                $success = true;
                $message = __('menu berhasil disimpan.');
            } else {
                $message = __('menu tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($menu, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Menu id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $menu = $this->Menu->get($id, [
            'contain' => ['Peran'],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $menu = $this->Menu->patchEntity($menu, $this->request->data, ['associated' => ['MenuModule']]);
            if ($this->Menu->save($menu)) {
                $success = true;
                $message = __('menu berhasil disimpan.');
            } else {
                $message = __('menu tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }

        $this->setResponseData($menu, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Menu id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $menu = $this->Menu->get($id);
        if ($this->Menu->delete($menu)) {
            $success = true;
            $message = __('menu berhasil dihapus.');
        } else {
            $this->setErrors($menu->errors());
        }
        $this->setResponseData($data, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Penomoran id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function deleteDetail($id = null)
    {
        $success = false;
        $message = '';
        $data = [];

        $this->request->allowMethod(['post', 'delete']);
        $menu = $this->Menu->MenuModule->get($id);

        if ($this->Menu->MenuModule->delete($menu)) {
            $success = true;
            $message = __('Menu Module berhasil dihapus.');
        } else {
            $message = __('Menu Module tidak berhasil dihapus. Silahkan coba kembali.');
        }
        $this->setResponseData($data, $success, $message);
    }

    public function getAppMenu()
    {
        $success = false;
        $message = '';
        $role = $this->getCurrentRole();
        $menu = [];

        if (!empty($role->id)) {
            $menu = $this->Menu->find('threaded');
            $menu->orderAsc('no_urut');
            $menu->matching('Peran', function ($q) use ($role) {
                return $q->select(['Menu.id', 'Menu.label_menu', 'Menu.tautan', 'Menu.parent_id', 'Menu.icon'])
                    ->where([
                        'Peran.id' => $role->id,
                    ])
                    ->order([
                        'Menu.no_urut' => 'ASC',
                    ]);
            });

            if (!empty($menu)) {
                $menu = $menu->toArray();

                $homeMenu = [
                    0 => [
                        'label_menu' => 'Home',
                        'tautan' => $role->home_path,
                        'children' => [],
                        'icon' => 'zmdi zmdi-home',
                    ],
                ];

                // add home path from role
                $menu = array_merge($homeMenu, $menu);

                $success = true;
            }
        }

        $this->setResponseData($menu, $success, $message);
    }

    public function getHierarchy()
    {
        $success = true;
        $message = '';
        $data = array();

        // Get All Menu
        $allMenu = $this->Menu->find('threaded', [
            'fields' => [
                'Menu.id',
                'label' => 'Menu.label_menu',
                'Menu.tautan',
                'Menu.parent_id',
            ],
            'order' => [
                'Menu.no_urut' => 'ASC',
            ],
        ]);
        $allMenuData = $allMenu->toArray();
        $data['hierarchy'] = $allMenuData;

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Validate if user has access to certain menu
     *
     * @param string $uri uri to check against
     *
     * @return void
     */
    public function validateAccess()
    {
        $success = false;
        $message = '';
        $userData = $this->getCurrentUser();
        $form_id = null;

        try {
            $uri = $this->request->getData('uri');

            // Remove most left / and #
            $uri = preg_replace('/^\/?#?\/?/', '', trim($uri));

            if (strlen($uri) > 0) {
                if (in_array($uri, ['home', 'home-dashboard', 'login', 'signup', 'faq'])) {
                    $success = true;
                } else {
                    // If it's dynamic form, validate the url
                    if (preg_match('/^form\//', $uri)) {
                        $validDynamicFormUrl = false;

                        // Extract the URI until certain segment
                        if (preg_match('/form\/render\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/render/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/deleteData\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/delete/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/edit\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/edit/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/add\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/add/{id}'
                            $validDynamicFormUrl = true;
                            $form_id = explode('/', $uri)[2];

                        } elseif (preg_match('/form\/list\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/list/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/view\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/view/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/report\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/report/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/report-grid\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/report/{id}'
                            $validDynamicFormUrl = true;

                        } elseif (preg_match('/form\/sign-report\/[0-9]+/', $uri, $matches)) {
                            $uri = $matches[0]; // will return 'form/report/{id}'
                            $validDynamicFormUrl = true;
                        }

                        if (!$validDynamicFormUrl) {
                            throw new \Exception('URL tidak valid');
                        }
                    } else {
                        if (preg_match('/[a-zA-Z\-]+(\/[a-zA-Z\-]+)?/', $uri, $matchUri)) {
                            if ($matchUri[0] !== 'dashboard') {
                                $uri = $matchUri[0];
                            }

                            if ($uri == 'tarif-item') {
                                $uri = 'tarif-izin';
                            } elseif (in_array($uri, ['retribusi', 'signature'])) {
                                $uri = 'proses-pengajuan';
                            } elseif ($uri == 'pemohon') {
                               // $success = true;
                                // TODO make sure this is the right mechanism
                            } elseif (in_array($uri, ['faq/view', 'faq/search', 'faq/search-all', 'faq/detail'])) {
                                $success = true;
                            }
                        }
                    }

                    // Check if any matching record exists
                    if (!empty($userData->peran_id) && !$success) {
                        $connection = ConnectionManager::get('default');

                        if (empty($form_id)) {
                            $sqlQuery = "
                                SELECT m.id FROM menu m
                                LEFT JOIN menu_module mm ON mm.menu_id = m.id
                                INNER JOIN peran_menu pm ON pm.menu_id = m.id
                                INNER JOIN peran p ON p.id = pm.peran_id AND p.id={$userData->peran_id}
                                WHERE m.tautan ILIKE '{$uri}' OR mm.tautan ILIKE '{$uri}'
                            ";
                        } else {
                            $sqlQuery = "
                                SELECT f.id
                                FROM form f
                                LEFT JOIN daftar_proses dp on dp.form_id = f.id
                                LEFT JOIN jenis_izin_proses jip on jip.form_id = f.id
                                WHERE (dp.form_id is not null OR jip.form_id is not null) AND f.id = '{$form_id}'
                            ";

                            if (!empty($userData->instansi_id)) {
                                $sqlQuery = $sqlQuery . " and (f.instansi_id = {$userData->instansi_id} or f.instansi_id is null)";
                            }
                        }

                        $menuData = $connection->query($sqlQuery)->fetchAll();

                        if (!empty($menuData)) {
                            $success = true;
                        } else {
                            $message = 'Anda tidak dapat mengakses ' . $uri;
                            $this->_statusCode = 401;
                        }
                    } else {
                        throw new \Exception('URL tidak valid');
                    }
                }
            } else {
                $success = true;
            }

        } catch (\Exception $ex) {
            $this->_statusCode = 401;
            $message = $ex->getMessage();
        }

        $this->setResponseData([], $success, $message);
    }
}
