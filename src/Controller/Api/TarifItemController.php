<?php
namespace App\Controller\Api;

use App\Model\Entity\TarifItem;

/**
 * TarifItem Controller
 *
 * @property \App\Model\Table\TarifItemTable $TarifItem
 */
class TarifItemController extends ApiController
{

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->TarifItem->setInstansi($this->getCurrentInstansi());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $jenisIzinId = isset($this->request->query['izin_id']) ? (int) $this->request->query['izin_id'] : '';

        $this->paginate = [
            'fields' => ['id', 'nama_item', 'satuan', 'jenis_izin_id'],
            'conditions' => [
                'OR' => [
                    'LOWER(TarifItem.nama_item) LIKE' => '%' . $this->_apiQueryString . '%'
                ],
                'TarifItem.jenis_izin_id' => $jenisIzinId
            ],
            'contain' => [
                'JenisIzin' => [
                    'fields' => ['id', 'jenis_izin']
                ]
            ]
        ];

        $tarifItem = $this->paginate($this->TarifItem);
        $paging = $this->request->params['paging']['TarifItem'];
        $tarifItem = $this->addRowNumber($tarifItem);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $tarifItem,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Tarif Item id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $tarifItem = $this->TarifItem->get($id, [
            'fields' => ['id', 'nama_item', 'satuan', 'jenis_izin_id'],
            'contain' => [
                'TarifHarga' => [
                    'fields' => [
                        'id', 'kategori', 'harga', 'tarif_item_id'
                    ]
                ],
                'JenisIzin' => [
                    'fields' => [
                        'id', 'jenis_izin'
                    ]
                ]
            ]
        ]);

        $this->setResponseData($tarifItem, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $tarifItem = $this->TarifItem->newEntity();
        if ($this->request->is('post')) {
            $tarifItem = $this->TarifItem->patchEntity($tarifItem, $this->request->data,
                [
                    'associated' => ['TarifHarga']
                ]
            );
            if ($this->TarifItem->save($tarifItem)) {
                $success = true;
                $message = __('Tarif Izin berhasil disimpan.');
            } else {
                $message = __('Tarif Izin tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($tarifItem, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Tarif Item id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $tarifItem = $this->TarifItem->get($id, [
            'contain' => [
                'TarifHarga' => [
                    'fields' => [
                        'id', 'kategori', 'harga', 'tarif_item_id'
                    ]
                ],
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $tarifItem = $this->TarifItem->patchEntity($tarifItem, $this->request->data,
                [
                    'associated' => ['TarifHarga']
                ]
            );
            if ($this->TarifItem->save($tarifItem)) {
                $success = true;
                $message = __('Tarif Izin berhasil disimpan.');
            } else {
                $this->setErrors($tarifItem->errors());
                $message = __('Tarif Izin tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($tarifItem, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Tarif Item id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $tarifItem = $this->TarifItem->get($id);

        if ($this->TarifItem->delete($tarifItem)) {
            $success = true;
            $message = __('Tarif Izin berhasil dihapus.');
        } else {
            $message = __('Tarif Izin tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    public function deleteTarifHarga($tarifHargaId)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['delete']);
        $tarifHarga = $this->TarifItem->TarifHarga->get($tarifHargaId);
        if ($this->TarifItem->TarifHarga->delete($tarifHarga)) {
            $success = true;
            $message = __('Kategori berhasil dihapus.');
        } else {
            $message = __('Kategori tidak berhasil dihapus. Silahkan coba kembali.');
        }
        $this->setResponseData($data, $success, $message);
    }
}
