<?php
namespace App\Controller\Api;

use Cake\ORM\TableRegistry;
use App\Controller\Api\ApiController;
use App\Model\Entity\JenisIzin;
use App\Model\Entity\UnitTerkait;
use App\Service\AlurProsesService;

/**
 * JenisIzin Controller
 *
 * @property \App\Model\Table\JenisIzinTable $JenisIzin
 */
class JenisIzinController extends ApiController
{

    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->JenisIzin->setInstansi($this->getCurrentInstansi());

        // Set current user to apply additional filter based on user
        $this->JenisIzin->setUser($this->getCurrentUser());
        $this->JenisIzin->setFilteredBeforeFind(true);
        $this->JenisIzin->setJenisIzinPengguna($this->getJenisIzinPengguna());
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $success = true;
        $message = '';

        $contain = [
            'Instansi' => ['fields' => ['id', 'nama']],
            'JenisPengajuan' => [
                'fields' => ['jenis_izin_id', 'jenis_pengajuan', 'lama_proses']
            ]
        ];

        $this->paginate = [
            'conditions' => [
                'OR' => [
                    'JenisIzin.jenis_izin ILIKE' => '%' . $this->_apiQueryString . '%'
                ]
            ],
            'contain' => $contain
        ];

        $jenisIzin = $this->paginate($this->JenisIzin);
        $paging = $this->request->params['paging']['JenisIzin'];
        $desa = $this->addRowNumber($jenisIzin);

        $data = array(
            'limit' => $paging['perPage'],
            'page' => $paging['page'],
            'items' => $desa,
            'total_items' => $paging['count']
        );
        $this->setResponseData($data, $success, $message);
    }

    /**
     * Support data for autocomplete
     */
    public function getList()
    {
        $success = true;
        $message = '';

        $onlyIzinBertarif = false;
        $conditions = [
            'JenisIzin.jenis_izin ILIKE' => '%' . $this->_apiQueryString . '%'
        ];

        if (isset($this->request->query['only_bertarif']) && !empty($this->request->query['only_bertarif'])) {
            if (strtoupper($this->request->query['only_bertarif']) == 'T') {
                $onlyIzinBertarif = true;
            }
        }

        if (!empty($this->request->getQuery('instansi_id'))) {
            $conditions['JenisIzin.instansi_id'] = $this->request->getQuery('instansi_id');
        }

        $jenisIzin = $this->JenisIzin->find('all', [
            'fields' => ['JenisIzin.id', 'JenisIzin.jenis_izin'],
            'conditions' => $conditions,
            'limit' => $this->_autocompleteLimit,
            'order' => [
                'jenis_izin' => 'ASC'
            ]
        ]);

        if ($onlyIzinBertarif) {
            $jenisIzin->innerJoin(
                ['FormulaRetribusi' => 'formula_retribusi'],
                ['FormulaRetribusi.jenis_izin_id = JenisIzin.id']
            );
        }

        $data = array(
            'items' => $jenisIzin
        );

        $this->setResponseData($data, $success, $message);
    }

    public function getPersyaratan($jenisIzinId)
    {
        $success = true;
        $message = '';

        $dokumenPendukung = $this->JenisIzin->DokumenPendukung->find('all', [
            'fields' => [
                'id', 'status', 'jenis_dokumen_id'
            ],
            'contain' => [
                'JenisDokumen' => [
                    'fields' => ['id', 'kode', 'deskripsi']
                ]
            ],
            'conditions' => [
                'DokumenPendukung.jenis_izin_id' => $jenisIzinId
            ]
        ])->toArray();

        $this->setResponseData($dokumenPendukung, $success, $message);
    }

    /**
     * View method
     *
     * @param string|null $id Jenis Izin id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $success = true;
        $message = '';

        $contain = [
            'JenisDokumen' => [
                'fields' => ['id', 'kode', 'deskripsi']
            ],
            'DokumenPendukung' => [
                'fields' => ['id', 'jenis_izin_id', 'jenis_dokumen_id', 'status']
            ],
            'DokumenPendukung.JenisDokumen' => [
                'fields' => ['id', 'kode', 'deskripsi']
            ],
            'IzinParalel' => [
                'fields' => ['id', 'izin_paralel_id', 'jenis_izin_id']
            ],
            'IzinParalel.JenisIzin' => [
                'fields' => ['id', 'jenis_izin']
            ]
        ];

        if ($this->requestSource != self::SOURCE_ANDROID) {
            $additionalContain = [
                'JenisPengajuan',
                'UnitTerkait' => [
                    'fields' => ['id', 'jenis_izin_id', 'unit_id']
                ],
                'UnitTerkait.Unit' => [
                    'fields' => ['id', 'nama', 'tipe', 'kode_daerah']
                ],
                'FormulaRetribusi' => [
                    'fields' => ['id', 'formula']
                ]
            ];
            $contain = array_merge($contain, $additionalContain);
        }

        $jenisIzin = $this->JenisIzin->get($id, [
            'fields' => [
                'id', 'jenis_izin', 'short_desc', 'kode_oss', 'jenis_dokumen_id'
            ],
            'contain' => $contain
        ]);

        if ($this->requestSource != self::SOURCE_ANDROID && is_array($jenisIzin->jenis_pengajuan)) {
            foreach ($jenisIzin->jenis_pengajuan as $index => $pengajuan) {
                $jenisPengajuan = $this->JenisIzin->JenisPengajuan->find('all', [
                    'conditions' => ['JenisPengajuan.id' => $pengajuan->id],
                    'contain' => [
                        'Penomoran' => [
                            'fields' => ['id', 'format']
                        ],
                        'AlurProses' => [
                            'fields' => [
                                'id', 'keterangan'
                            ]
                        ],
                        'AlurProses.DaftarProses' => [
                            'fields' => [
                                'id', 'no', 'tautan', 'alur_proses_id', 'jenis_proses_id',
                                'form_id', 'template_data_id'
                            ],
                            'sort' => ['no' => 'ASC']
                        ],
                        'AlurProses.DaftarProses.JenisProses' => [
                            'fields' => [
                                'id', 'kode', 'nama_proses', 'tautan'
                            ]
                        ],
                        'AlurProses.DaftarProses.Form' => [
                            'fields' => [
                                'id', 'nama_form'
                            ]
                        ],
                        'AlurProses.DaftarProses.TemplateData' => [
                            'fields' => [
                                'id', 'keterangan'
                            ]
                        ],
                        'AlurProses.DaftarProses.JenisIzinProses' => [
                            'fields' => [
                                'id', 'jenis_pengajuan_id', 'daftar_proses_id', 'form_id',
                                'tautan', 'template_data_id'
                            ],
                            'conditions' => [
                                'jenis_pengajuan_id' => $pengajuan->id
                            ]
                        ],
                        'AlurProses.DaftarProses.JenisIzinProses.Form' => [
                            'fields' => [
                                'id', 'nama_form'
                            ]
                        ],
                        'AlurProses.DaftarProses.JenisIzinProses.TemplateData' => [
                            'fields' => [
                                'id', 'keterangan'
                            ]
                        ],
                    ]
                ]);

                if ($jenisPengajuan) {
                    $jenisIzin->jenis_pengajuan[$index] = $jenisPengajuan->first();
                }
            }
        }
        
        $this->setResponseData($jenisIzin, $success, $message);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $success = false;
        $message = '';

        $jenisIzin = $this->JenisIzin->newEntity();
        if ($this->request->is('post')) {
            $jenisIzin = $this->JenisIzin->patchEntity($jenisIzin, $this->request->data,
                [
                    'associated' => ['JenisPengajuan', 'UnitTerkait', 'DokumenPendukung', 'IzinParalel']
                ]
            );
            if ($this->JenisIzin->save($jenisIzin)) {
                $success = true;
                $message = __('jenis izin berhasil disimpan.');
            } else {
                $this->setErrors($jenisIzin->errors());
                $message = __('jenis izin tidak berhasil disimpan. Silahkan coba kembali.');
            }
        }
        $this->setResponseData($jenisIzin, $success, $message);
    }

    /**
     * Edit method
     *
     * @param string|null $id Jenis Izin id.
     * @return \Cake\Http\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Http\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $success = false;
        $message = '';

        $jenisIzin = $this->JenisIzin->get($id, [
            'contain' => [
                'JenisPengajuan',
                'JenisPengajuan.AlurProses' => [
                    'fields' => [
                        'id', 'keterangan'
                    ]
                ],
                'JenisPengajuan.AlurProses.DaftarProses' => [
                    'fields' => [
                        'id', 'no', 'tautan', 'alur_proses_id', 'jenis_proses_id', 'form_id', 'template_data_id'
                    ],
                    'sort' => ['no' => 'ASC']
                ],
                'JenisPengajuan.AlurProses.DaftarProses.JenisProses' => [
                    'fields' => [
                        'id', 'kode', 'nama_proses', 'tautan'
                    ]
                ],
                'JenisPengajuan.AlurProses.DaftarProses.Form' => [
                    'fields' => [
                        'id', 'nama_form'
                    ]
                ],
                'JenisPengajuan.AlurProses.DaftarProses.TemplateData' => [
                    'fields' => [
                        'id', 'keterangan'
                    ]
                ],
                'JenisPengajuan.AlurProses.DaftarProses.JenisIzinProses' => [
                    'fields' => [
                        'id', 'jenis_pengajuan_id', 'daftar_proses_id', 'form_id', 'tautan', 'template_data_id'
                    ]
                ],
                'JenisPengajuan.AlurProses.DaftarProses.JenisIzinProses.Form' => [
                    'fields' => [
                        'id', 'nama_form'
                    ]
                ],
                'JenisPengajuan.AlurProses.DaftarProses.JenisIzinProses.TemplateData' => [
                    'fields' => [
                        'id', 'keterangan'
                    ]
                ],
                'UnitTerkait',
                'UnitTerkait.Unit',
                'DokumenPendukung' => [
                    'fields' => ['id', 'jenis_izin_id', 'nama_dokumen', 'status']
                ],
                'IzinParalel',
                'IzinParalel.JenisIzin'
            ]
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            try {
                $jenisIzin = $this->JenisIzin->patchEntity($jenisIzin, $this->request->data,
                    [
                        'associated' => [
                            'JenisPengajuan',
                            'UnitTerkait',
                            'DokumenPendukung',
                            'IzinParalel']
                    ]
                );

                $jenisIzinProsesTable = TableRegistry::get('JenisIzinProses');

                if ($this->JenisIzin->save($jenisIzin)) {
                    // Save Override Jenis Izin Proses
                    foreach ($this->request->data['jenis_pengajuan'] as $jenisPengajuan) {
                        foreach ($jenisPengajuan['alur_prose']['daftar_proses'] as $daftarProses) {
                            if (is_array($daftarProses['jenis_izin_prose']) && !empty($daftarProses['jenis_izin_prose'])) {
                                $overrideProses = $daftarProses['jenis_izin_prose'];
                                $needSaveOverride = false;

                                if (isset($overrideProses['template_data'])) {
                                    unset($overrideProses['template_data']);
                                }

                                if (isset($overrideProses['form'])) {
                                    unset($overrideProses['form']);
                                }

                                // if it's an existing record
                                if (isset($overrideProses['id'])) {
                                    $jenisIzinProsesEntity = $jenisIzinProsesTable->get($overrideProses['id']);
                                    $needSaveOverride = true;
                                } else {
                                    $jenisIzinProsesEntity = $jenisIzinProsesTable->newEntity();
                                    $needSaveOverride = true;
                                }

                                if ($needSaveOverride) {
                                    $jenisIzinProsesEntity = $jenisIzinProsesTable->patchEntity($jenisIzinProsesEntity, $overrideProses);

                                    if (!$jenisIzinProsesTable->save($jenisIzinProsesEntity)) {
                                        $this->setErrors($jenisIzinProsesEntity->errors());
                                        throw new \Exception('Terjadi kesalahan saat menyimpan Override Proses');
                                    }
                                }
                            }
                        }
                    }

                    $success = true;
                    $message = __('Jenis Izin berhasil disimpan.');
                } else {
                    $this->setErrors($jenisIzin->errors());
                    $message = __('Jenis Izin tidak berhasil disimpan. Silahkan coba kembali.');
                }

            } catch (\Exception $ex) {
                $message = $ex->getMessage();
            }
        }

        $this->setResponseData($jenisIzin, $success, $message);
    }

    /**
     * Delete method
     *
     * @param string|null $id Jenis Izin id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $success = false;
        $message = '';
        $data = array();

        $this->request->allowMethod(['post', 'delete']);
        $jenisIzin = $this->JenisIzin->get($id);

        if ($this->JenisIzin->delete($jenisIzin)) {
            $success = true;
            $message = __('jenis izin berhasil dihapus.');
        } else {
            $this->setErrors($jenisIzin->errors());
            $message = __('jenis izin tidak berhasil dihapus. Silahkan coba kembali.');
        }

        $this->setResponseData($data, $success, $message);
    }

    /**
     * Copy Jenis Izin
     *
     * @return void
     */
    public function copy($id) 
    {
        $success = false;
        $message = '';

        // we don't copy daftar_proses as it is shared with other jenis izin
        $jenisIzin = $this->JenisIzin->get(
            $id,
            [
                'contain' => [
                    'DokumenPendukung',
                    'IzinParalel',
                    'JenisPengajuan',
                    'JenisPengajuan.JenisIzinProses',
                    'UnitTerkait',
                    'UnitTerkait.Unit', // to validate if the unit exists
                    'FormulaRetribusi'
                ],
            ]
        )->toArray();

        if ($this->request->is(['patch', 'post', 'put']) && !empty($jenisIzin)) {
            AlurProsesService::setInstansi($this->getCurrentInstansi());
            $data = AlurProsesService::prepareCopyJenisIzin($jenisIzin);

            $newJenisIzin = $this->JenisIzin->newEntity();
            $newJenisIzin = $this->JenisIzin->patchEntity(
                $newJenisIzin,
                $data,
                [
                    'associated' => [
                        'DokumenPendukung', 'IzinParalel', 'JenisPengajuan',
                        'JenisPengajuan.JenisIzinProses', 'FormulaRetribusi',
                        'UnitTerkait'
                    ]
                ]
            );

            if ($this->JenisIzin->save($newJenisIzin)) {
                $success = true;
                $message = __('Jenis Izin berhasil diduplikasi.');
            } else {
                $this->setErrors($newJenisIzin->errors());
                $message = __('Jenis Izin tidak berhasil diduplikasi. Silahkan coba kembali.');
            }
        }

        $this->setResponseData([], $success, $message);
    }
}
