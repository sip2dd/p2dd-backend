<?php
/**
 * Created by PhpStorm.
 * User: indra
 * Date: 10/17/17
 * Time: 8:03 AM
 */

namespace App\Controller\Rest;

use Cake\ORM\TableRegistry;


class PublicController extends RestController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('RestServices');
    }

    public function create($serviceId)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            // get post data
            $data = $this->request->getData('data');

            if (isset($data['id'])) {
                unset($data['id']);
            }

            // Read setting for corresponding id and create the record
            $datatabelTable = $this->loadTableModel($serviceId);
            $newEntity = $datatabelTable->newEntity();
            $instansi = $this->getCurrentInstansi();

            if ($instansi) {
                $data['instansi_id'] = $instansi->id;
            }

            $newEntity = $datatabelTable->patchEntity($newEntity, $data);

            if ($datatabelTable->save($newEntity)) {
                $success = true;
                $message = 'Record berhasil dibuat';
                $data = $newEntity;
            } else {
                $this->setErrors($newEntity->errors());
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->_statusCode = 400; // Bad Request
        }

        $this->setResponseData($data, $success, $message);
    }

    public function update($serviceId)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            // Get POST data
            $formData = $this->request->getData('data');

            if (!isset($formData['record_id']) || empty($formData['record_id'])) {
                throw new \Exception('id tidak boleh kosong');
            }

            $recordId = $formData['record_id'];
            if (isset($formData['id'])) {
                unset($formData['id']);
            }

            // Read setting for corresponding id
            $datatabelTable = $this->loadTableModel($serviceId);
            $existingEntity = $datatabelTable->find('all', [
               'conditions' => [
                   'id' => $recordId
               ]
            ])->first();

            if (!$existingEntity) {
                throw new \Exception('Record tidak ditemukan');
            }

            // Update the data
            $updateData = $formData;
            unset($updateData['record_id']);
            $instansi = $this->getCurrentInstansi();

            if ($instansi) {
                $updateData['instansi_id'] = $instansi->id;
            }

            $existingEntity = $datatabelTable->patchEntity($existingEntity, $updateData);

            if ($datatabelTable->save($existingEntity)) {
                $success = true;
                $message = 'Record berhasil disimpan';
                $data = $existingEntity;
            } else {
                $this->setErrors($existingEntity->errors());
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->_statusCode = 400; // Bad Request
        }

        $this->setResponseData($data, $success, $message);
    }

    public function delete($serviceId)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            // Get POST data
            $formData = $this->request->getData('data');

            if (!isset($formData['record_id']) || empty($formData['record_id'])) {
                throw new \Exception('id tidak boleh kosong');
            }

            $recordId = $formData['record_id'];

            // Read setting for corresponding id
            $datatabelTable = $this->loadTableModel($serviceId);
            $existingEntity = $datatabelTable->find('all', [
                'conditions' => [
                    'id' => $recordId
                ]
            ])->first();

            if (!$existingEntity) {
                throw new \Exception('Record tidak ditemukan');
            }

            if ($datatabelTable->delete($existingEntity)) {
                $success = true;
                $message = 'Record berhasil dihapus';
            } else {
                $this->setErrors($existingEntity->errors());
            }
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->_statusCode = 400; // Bad Request
        }

        $this->setResponseData($data, $success, $message);
    }

    public function get($serviceId)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            // Get POST data
            $formData = $this->request->getData('data');

            if (!isset($formData['record_id']) || empty($formData['record_id'])) {
                throw new \Exception('id tidak boleh kosong');
            }

            $recordId = $formData['record_id'];
            $fieldFilters = $this->request->getData('fields');

            $datatabelTable = $this->loadTableModel($serviceId);
            $findQuery = $datatabelTable->find()->where(['id' => $recordId]);

            if ($fieldFilters) {
                $findQuery->select($fieldFilters);
            }

            $data = $findQuery->firstOrFail();
            $success = true;
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->_statusCode = 404; // Set as Not Found
        }

        $this->setResponseData($data, $success, $message);
    }

    public function getAll($serviceId)
    {
        $success = false;
        $message = '';
        $data = [];

        try {
            // read setting for corresponding id
            $datatabelTable = $this->loadTableModel($serviceId);

            // Get filters passed
            $fieldFilters = $this->request->getData('fields');
            $conditionFilters = $this->request->getData('conditions');

            // BEGIN - getting paginated data
            $limit = $this->_apiLimit;
            $page = $this->_apiPage;
            $countQuery = $datatabelTable->find('all');
            $findQuery = $datatabelTable->find('all');

            if ($conditionFilters) {
                $countQuery->where($conditionFilters);
                $findQuery->where($conditionFilters);
            }

            // Calculate Pagination
            $count = $countQuery->count();
            $totalPages = ceil($count / $limit);
            if ($page > $totalPages) $page = $totalPages;
            $start = $limit * $page - $limit; // do not put $limit*($page - 1)

            if ($fieldFilters) {
                $findQuery->select($fieldFilters);
            }

            $items = $findQuery->limit($limit)->offset($start);
            // END - getting paginated data

            // Return the data with pagination info
            $data = [
                'limit' => $limit,
                'page' => $page,
                'total_items' => $count,
                'items' => $items
            ];
            $success = true;
        } catch (\Exception $ex) {
            $message = $ex->getMessage();
            $this->_statusCode = 400; // Set as Bad Request
        }

        $this->setResponseData($data, $success, $message);
    }

    private function loadTableModel($restServiceId)
    {
        // read setting for corresponding id
        $restService = $this->RestServices->get($restServiceId, [
            'fields' => [
                'datatabel_id'
            ],
            'contain' => [
                'Datatabel' => [
                    'fields' => ['id', 'nama_datatabel', 'is_custom']
                ]
            ],
            'conditions' => [
                'is_active' => 1
            ]
        ]);

        $tableName = $restService->datatabel->nama_datatabel;
        if (!$tableName) {
            throw new \Exception('Datatabel tidak didefinisikan');
        }

        $datatabelTable = TableRegistry::get($tableName, [
            'table' => $tableName
        ]);

        if (!$datatabelTable) {
            throw new \Exception('Datatabel tidak ditemukan');
        }

        $datatabelTable->setInstansi($this->getCurrentInstansi());
        return $datatabelTable;
    }
}